[{"original_position": 84, "diff_hunk": "@@ -0,0 +1,159 @@\n+package com.mobileproto.david.photofeed;\n+\n+\n+import android.app.AlertDialog;\n+import android.content.DialogInterface;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.os.Bundle;\n+import android.support.v4.app.Fragment;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+import android.widget.ImageView;\n+import android.widget.LinearLayout;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * Created by david on 10/2/15. This class extends fragment, and is the representation of the user's\n+ * actual photo feed. It contains functionality to remove photos from the DB.\n+ */\n+public class FeedFragment extends Fragment\n+{\n+\n+    private static final String DEBUG_TAG = \"feedFragmentDebug\";\n+    private static final String ERROR_TAG = \"feedFragmentError\";\n+    private static final String POS_KEY = \"pos\";\n+\n+    private Button back, next;\n+    private ImageView imgView;\n+    private int pos;\n+\n+    // The current image url being displayed\n+    private String currUrl;\n+\n+    // The back button's listener. Decrement the current position and update the current photo\n+    private View.OnClickListener backListener = new View.OnClickListener()\n+    {\n+        @Override\n+        public void onClick(View v)\n+        {\n+            pos -= 1;\n+            updateFeed(((MainActivity) getActivity()).getmDbHelper());\n+        }\n+    };\n+\n+    // The forward button's listener. Decrement the current position and update the current photo\n+    private View.OnClickListener fwdListener = new View.OnClickListener()\n+    {\n+        @Override\n+        public void onClick(View v)\n+        {\n+            pos += 1;\n+            updateFeed(((MainActivity) getActivity()).getmDbHelper());\n+        }\n+    };\n+\n+    // The long click listener on the image view. When clicked, bring up a dialog and prompts the\n+    // user to confirm to the image removal from the DP. Then, updates the image.\n+    private View.OnLongClickListener longListener = new View.OnLongClickListener()\n+    {\n+        @Override\n+        public boolean onLongClick(View v)\n+        {\n+            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\n+            builder.setMessage(\"Remove image from feed?\");\n+            builder.setPositiveButton(\"Yes\", new DialogInterface.OnClickListener()\n+            {\n+                @Override\n+                public void onClick(DialogInterface dialog, int which)\n+                {\n+                    ((MainActivity) getActivity()).removeUrlFromDb(currUrl);\n+                    updateFeed(((MainActivity) getActivity()).getmDbHelper());\n+                    dialog.cancel();\n+                }\n+            });\n+            builder.setNegativeButton(\"Cancel\", null);\n+            builder.show();\n+            return false;\n+        }\n+    };\n+", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42423612", "created_at": "2015-10-19T20:46:27Z", "body": "using butterknife for the above Listeners would save you a lot of space, however, either way is perfectly fine!", "updated_at": "2015-10-19T20:46:27Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42423612", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42423612"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42423612"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16"}}, "commit_id": "22498388099f815389340a378a6f73270e5f0540", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "PhotoFeed/app/src/main/java/com/mobileproto/david/photofeed/FeedFragment.java", "position": 84, "original_commit_id": "22498388099f815389340a378a6f73270e5f0540", "id": 42423612}, {"original_position": 142, "diff_hunk": "@@ -0,0 +1,159 @@\n+package com.mobileproto.david.photofeed;\n+\n+\n+import android.app.AlertDialog;\n+import android.content.DialogInterface;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.os.Bundle;\n+import android.support.v4.app.Fragment;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+import android.widget.ImageView;\n+import android.widget.LinearLayout;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * Created by david on 10/2/15. This class extends fragment, and is the representation of the user's\n+ * actual photo feed. It contains functionality to remove photos from the DB.\n+ */\n+public class FeedFragment extends Fragment\n+{\n+\n+    private static final String DEBUG_TAG = \"feedFragmentDebug\";\n+    private static final String ERROR_TAG = \"feedFragmentError\";\n+    private static final String POS_KEY = \"pos\";\n+\n+    private Button back, next;\n+    private ImageView imgView;\n+    private int pos;\n+\n+    // The current image url being displayed\n+    private String currUrl;\n+\n+    // The back button's listener. Decrement the current position and update the current photo\n+    private View.OnClickListener backListener = new View.OnClickListener()\n+    {\n+        @Override\n+        public void onClick(View v)\n+        {\n+            pos -= 1;\n+            updateFeed(((MainActivity) getActivity()).getmDbHelper());\n+        }\n+    };\n+\n+    // The forward button's listener. Decrement the current position and update the current photo\n+    private View.OnClickListener fwdListener = new View.OnClickListener()\n+    {\n+        @Override\n+        public void onClick(View v)\n+        {\n+            pos += 1;\n+            updateFeed(((MainActivity) getActivity()).getmDbHelper());\n+        }\n+    };\n+\n+    // The long click listener on the image view. When clicked, bring up a dialog and prompts the\n+    // user to confirm to the image removal from the DP. Then, updates the image.\n+    private View.OnLongClickListener longListener = new View.OnLongClickListener()\n+    {\n+        @Override\n+        public boolean onLongClick(View v)\n+        {\n+            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\n+            builder.setMessage(\"Remove image from feed?\");\n+            builder.setPositiveButton(\"Yes\", new DialogInterface.OnClickListener()\n+            {\n+                @Override\n+                public void onClick(DialogInterface dialog, int which)\n+                {\n+                    ((MainActivity) getActivity()).removeUrlFromDb(currUrl);\n+                    updateFeed(((MainActivity) getActivity()).getmDbHelper());\n+                    dialog.cancel();\n+                }\n+            });\n+            builder.setNegativeButton(\"Cancel\", null);\n+            builder.show();\n+            return false;\n+        }\n+    };\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                             Bundle savedInstanceState)\n+    {\n+\n+        // Get references to the view, buttons, and imageview.\n+        View view = inflater.inflate(R.layout.fragment_feed, container, false);\n+        back = (Button) view.findViewById(R.id.backBtn);\n+        next = (Button) view.findViewById(R.id.nextBtn);\n+        imgView = (ImageView) view.findViewById(R.id.imageView1);\n+        imgView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n+\n+        if (savedInstanceState == null)\n+            pos = 0;\n+        else\n+            pos = savedInstanceState.getInt(POS_KEY);\n+\n+        // Set the listeners\n+        back.setOnClickListener(backListener);\n+        next.setOnClickListener(fwdListener);\n+        imgView.setOnLongClickListener(longListener);\n+        updateFeed(((MainActivity) getActivity()).getmDbHelper());\n+        return view;\n+    }\n+\n+    // Updates the image feed by querying the SQL database and then displaying the proper image.\n+    public void updateFeed(DatabaseHandler handler)\n+    {\n+        SQLiteDatabase db = handler.getReadableDatabase();\n+        // Define a projection that specifies which columns from the database\n+        // you will actually use after this query.\n+        String[] projection = {\n+                DatabaseHandler.FeedEntry._ID,\n+                DatabaseHandler.FeedEntry.COLUMN_NAME_URL\n+        };\n+\n+        Cursor c = db.query(\n+                DatabaseHandler.FeedEntry.TABLE_NAME,  // The table to query\n+                projection,                               // The columns to return\n+                null,                                // The columns for the WHERE clause\n+                null,                            // The values for the WHERE clause\n+                null,                                     // don't group the rows\n+                null,                                     // don't filter by row groups\n+                null                                 // The sort order\n+        );\n+\n+        // Wrap back around if we go past the length of the DB\n+        if (pos >= c.getCount())\n+        {\n+            pos = 0;\n+            Log.d(DEBUG_TAG, \"DB overflow. Resetting to 0\");\n+        }\n+        if (pos < 0)\n+        {\n+            pos = c.getCount() - 1;\n+            Log.d(DEBUG_TAG, \"DB overflow. Resetting to end\");\n+        }\n+        Log.d(DEBUG_TAG, \"Current position: \" + Integer.toString(pos));", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42423792", "created_at": "2015-10-19T20:48:02Z", "body": "Delete these after they are done being used for debugging.", "updated_at": "2015-10-19T20:48:02Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42423792", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42423792"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42423792"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16"}}, "commit_id": "22498388099f815389340a378a6f73270e5f0540", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "PhotoFeed/app/src/main/java/com/mobileproto/david/photofeed/FeedFragment.java", "position": 142, "original_commit_id": "22498388099f815389340a378a6f73270e5f0540", "id": 42423792}, {"original_position": 52, "diff_hunk": "@@ -0,0 +1,66 @@\n+package com.mobileproto.david.photofeed;\n+\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.os.AsyncTask;\n+import android.util.Log;\n+import android.widget.ImageView;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+\n+/**\n+ * Created by david on 10/1/15. This class allows for the asynchronous loading of images into the\n+ * GridView\n+ */\n+public class ImageBitmapGetter extends AsyncTask<String, Void, Bitmap>\n+{\n+    private static final String ERROR_TAG = \"bitmapError\";\n+    private static final int myWidth = 80, myHeight = 80;\n+    private ImageView myView;\n+\n+    public ImageBitmapGetter(ImageView view, int width, int height)\n+    {\n+        super();\n+        myView = view;\n+    }\n+\n+    @Override\n+    protected Bitmap doInBackground(String... urls)\n+    {\n+        Bitmap bm = null;\n+        try\n+        {\n+            // Load the image from an input stream created from a URL connection\n+            URL aURL = new URL(urls[0]);\n+            URLConnection conn = aURL.openConnection();\n+            conn.connect();\n+            InputStream is = conn.getInputStream();\n+            BufferedInputStream bis = new BufferedInputStream(conn.getInputStream());\n+            BitmapFactory.Options o1 = new BitmapFactory.Options();\n+            bm = BitmapFactory.decodeStream(bis, null, o1);\n+//            int imgHeight = o1.outHeight;\n+//            int imgWidth = o1.outWidth;\n+//            boolean isWider = (float) imgWidth / myWidth > (float) imgHeight / myHeight;\n+//\n+//            if (isWider)\n+//                bm = Bitmap.createScaledBitmap(bm, imgWidth * myHeight / imgHeight, myHeight, false);\n+//            else\n+//                bm = Bitmap.createScaledBitmap(bm, myWidth, imgHeight * myWidth / imgWidth, false);", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42424162", "created_at": "2015-10-19T20:51:23Z", "body": "delete blocks like this from final version", "updated_at": "2015-10-19T20:51:23Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42424162", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42424162"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42424162"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16"}}, "commit_id": "22498388099f815389340a378a6f73270e5f0540", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "PhotoFeed/app/src/main/java/com/mobileproto/david/photofeed/ImageBitmapGetter.java", "position": 52, "original_commit_id": "22498388099f815389340a378a6f73270e5f0540", "id": 42424162}, {"original_position": 83, "diff_hunk": "@@ -0,0 +1,147 @@\n+package com.mobileproto.david.photofeed;\n+\n+import android.content.ContentValues;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.support.v4.app.Fragment;\n+import android.support.v4.app.FragmentManager;\n+import android.support.v4.app.FragmentStatePagerAdapter;\n+import android.support.v4.view.PagerAdapter;\n+import android.support.v4.view.ViewPager;\n+import android.support.v7.app.AppCompatActivity;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+\n+import com.android.volley.RequestQueue;\n+import com.android.volley.toolbox.Volley;\n+\n+\n+/*\n+ * This class is the application's main activity. It contains the reference to the DB,\n+  * a Volley request que, and has a ViewPager to allow for sliding back and forth between fragments.\n+ */\n+public class MainActivity extends AppCompatActivity\n+{\n+\n+    private static final int NUM_PAGES = 2;\n+    private ViewPager mPager;\n+    private PagerAdapter mPagerAdapter;\n+    private RequestQueue mRequestQueue;\n+    private DatabaseHandler mDbHelper;\n+    private static final String DEBUG_TAG = \"Activity\";\n+\n+    public RequestQueue getmRequestQueue()\n+    {\n+        return mRequestQueue;\n+    }\n+\n+    @Override\n+    // When creating the activity, initialize a DB helper, a pager, and a request que for Volley.\n+    protected void onCreate(Bundle savedInstanceState)\n+    {\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.activity_screen_slide);\n+\n+        mDbHelper = new DatabaseHandler(this);\n+\n+        mPager = (ViewPager) findViewById(R.id.pager);\n+        mPagerAdapter = new ScreenSlidePagerAdapter(getSupportFragmentManager());\n+        mPager.setAdapter(mPagerAdapter);\n+        mRequestQueue = Volley.newRequestQueue(this);\n+    }\n+\n+\n+    @Override\n+    public boolean onCreateOptionsMenu(Menu menu)\n+    {\n+        // Inflate the menu; this adds items to the action bar if it is present.\n+        getMenuInflater().inflate(R.menu.menu_main, menu);\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onOptionsItemSelected(MenuItem item)\n+    {\n+        // Handle action bar item clicks here. The action bar will\n+        // automatically handle clicks on the Home/Up button, so long\n+        // as you specify a parent activity in AndroidManifest.xml.\n+        int id = item.getItemId();\n+\n+        //noinspection SimplifiableIfStatement\n+        if (id == R.id.action_settings)\n+        {\n+            return true;\n+        }\n+\n+        return super.onOptionsItemSelected(item);\n+    }\n+\n+    // This class manages the page-sliding in this app.\n+    private class ScreenSlidePagerAdapter extends FragmentStatePagerAdapter\n+    {", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42424402", "created_at": "2015-10-19T20:53:26Z", "body": "This seems important enough to go in its own file just so its easier to find", "updated_at": "2015-10-19T20:53:26Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42424402", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42424402"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42424402"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16"}}, "commit_id": "22498388099f815389340a378a6f73270e5f0540", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "PhotoFeed/app/src/main/java/com/mobileproto/david/photofeed/MainActivity.java", "position": 83, "original_commit_id": "22498388099f815389340a378a6f73270e5f0540", "id": 42424402}, {"original_position": 196, "diff_hunk": "@@ -0,0 +1,197 @@\n+package com.mobileproto.david.photofeed;\n+\n+import android.app.AlertDialog;\n+import android.content.DialogInterface;\n+import android.support.v4.app.Fragment;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.KeyEvent;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.view.inputmethod.EditorInfo;\n+import android.widget.AdapterView;\n+import android.widget.EditText;\n+import android.widget.GridView;\n+import android.widget.TextView;\n+\n+import com.android.volley.Request;\n+import com.android.volley.RequestQueue;\n+import com.android.volley.Response;\n+import com.android.volley.Response.ErrorListener;\n+import com.android.volley.VolleyError;\n+import com.android.volley.toolbox.JsonObjectRequest;\n+\n+import org.apache.http.client.utils.URIBuilder;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+\n+/**\n+ * This fragment is where the user searches for images. It has a gridview for displaying the images\n+ */\n+public class SearchFragment extends Fragment\n+{\n+\n+    private static final String DEBUG_TAG = \"searchFragmentDebug\";\n+    private static final String ERROR_TAG = \"searchFragmentError\";\n+    private static final String URLS_TAG = \"urls\";\n+    private static final String KEY = \"AIzaSyDYCakn7Ro2OySe2cLs1MHvVpN-x5HfO4k\";\n+    private static final String CX = \"016507790316430451546:c67etf_pbba\";\n+\n+    private ArrayList<String> urls;\n+\n+    private EditText searchText;\n+    private GridViewAdapter gridViewAdapter;\n+\n+    // The listener for the search text field\n+    private TextView.OnEditorActionListener searchListener = new TextView.OnEditorActionListener()\n+    {\n+\n+        @Override\n+        public boolean onEditorAction(TextView v, int actionId, KeyEvent event)\n+        {\n+            if (actionId == EditorInfo.IME_ACTION_SEARCH)\n+            {\n+                performSearch(v.getText().toString());\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    // The listener for when a volley request comes back (Google has returned images). Adds the urls\n+    // to the ArrayAdapter and notifies that data has changed.\n+    private Response.Listener listener = new Response.Listener<JSONObject>()\n+    {\n+        @Override\n+        public void onResponse(JSONObject response)\n+        {\n+            try\n+            {\n+                JSONArray images = response.getJSONArray(\"items\");\n+\n+                String[] imgURLs = new String[images.length()];\n+                for (int i = 0; i < imgURLs.length; i++)\n+                    imgURLs[i] = images.getJSONObject(i).getJSONObject(\"image\")\n+                            .getString(\"thumbnailLink\");\n+\n+                for (String url : imgURLs)\n+                    urls.add(url);\n+\n+                gridViewAdapter.notifyDataSetChanged();\n+\n+            } catch (JSONException e)\n+            {\n+                Log.e(ERROR_TAG, e.toString());\n+                ;\n+            }\n+        }\n+    };\n+\n+    // Long click listener for adding an image to a DB\n+    private AdapterView.OnItemLongClickListener longClick = new AdapterView.OnItemLongClickListener()\n+    {\n+        @Override\n+        public boolean onItemLongClick(AdapterView<?> parent, View view, final int position, long id)\n+        {\n+            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\n+            builder.setMessage(\"Added image to Feed\");\n+            builder.setPositiveButton(\"OK\", new DialogInterface.OnClickListener()\n+            {\n+                @Override\n+                public void onClick(DialogInterface dialog, int which)\n+                {\n+                    ((MainActivity) getActivity()).addUrlToDb(urls.get(position));\n+                    dialog.cancel();\n+                }\n+            });\n+            builder.setNegativeButton(\"Undo\", null);\n+            builder.show();\n+            return false;\n+        }\n+    };\n+\n+    public SearchFragment()\n+    {\n+    }\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                             Bundle savedInstanceState)\n+    {\n+\n+        // create references to the Search and adapter, and set listeners.\n+\n+        View view = inflater.inflate(R.layout.fragment_search, container, false);\n+        searchText = (EditText) view.findViewById(R.id.searchText);\n+        searchText.setOnEditorActionListener(searchListener);\n+\n+        if (savedInstanceState == null)\n+            urls = new ArrayList<>();\n+        else\n+            urls = savedInstanceState.getStringArrayList(URLS_TAG);\n+\n+        GridView gridView = (GridView) view.findViewById(R.id.gridView);\n+        gridViewAdapter = new GridViewAdapter(getActivity(), R.layout.grid_item_layout, urls);\n+        gridView.setAdapter(gridViewAdapter);\n+        gridView.setOnItemLongClickListener(longClick);\n+\n+        return view;\n+    }\n+\n+    @Override\n+    public void onSaveInstanceState(Bundle savedInstanceState)\n+    {\n+        // Save the current grocery list\n+        savedInstanceState.putStringArrayList(URLS_TAG, urls);\n+\n+        // Always call the superclass so it can save the view hierarchy state\n+        super.onSaveInstanceState(savedInstanceState);\n+    }\n+\n+    // This function is called every time the user presses search. Send a request to the Volley que\n+    // up in the MainActivity.\n+    private void performSearch(String search)\n+    {\n+        // searchText.clearFocus();\n+        RequestQueue mRequestQueue = ((MainActivity) getActivity()).getmRequestQueue();\n+        try\n+        {\n+            int[] startVals = {1, 11, 21};\n+            for (int i : startVals)\n+            {\n+                URI uri = new URIBuilder()\n+                        .setScheme(\"https\")\n+                        .setHost(\"www.googleapis.com\")\n+                        .setPath(\"/customsearch/v1\")\n+                        .setParameter(\"key\", KEY)\n+                        .setParameter(\"cx\", CX)\n+                        .setParameter(\"searchType\", \"image\")\n+                        .setParameter(\"q\", search)\n+                        .setParameter(\"start\", Integer.toString(i))\n+                        .build();\n+                String url = uri.toString();\n+                JsonObjectRequest jsObjRequest = new JsonObjectRequest(Request.Method.GET, url, null,\n+                        listener, new ErrorListener()\n+                {\n+                    @Override\n+                    public void onErrorResponse(VolleyError e)\n+                    {\n+                        Log.e(ERROR_TAG, e.toString());\n+                    }\n+                });\n+                mRequestQueue.add(jsObjRequest);\n+            }\n+        } catch (URISyntaxException e)\n+        {\n+            e.printStackTrace();\n+        } finally\n+        {\n+        }\n+    }", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42424802", "created_at": "2015-10-19T20:56:47Z", "body": "All looks good! Interesting class layout.", "updated_at": "2015-10-19T20:56:47Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42424802", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42424802"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42424802"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16"}}, "commit_id": "22498388099f815389340a378a6f73270e5f0540", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "PhotoFeed/app/src/main/java/com/mobileproto/david/photofeed/SearchFragment.java", "position": 196, "original_commit_id": "22498388099f815389340a378a6f73270e5f0540", "id": 42424802}, {"original_position": 7, "diff_hunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+              android:layout_width=\"match_parent\"\n+              android:layout_height=\"match_parent\"\n+              android:paddingLeft=\"16dp\"\n+              android:paddingRight=\"16dp\"\n+              android:orientation=\"vertical\" >", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42424873", "created_at": "2015-10-19T20:57:24Z", "body": "use dimens.xml for anything with -some number-dp ", "updated_at": "2015-10-19T20:57:40Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42424873", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42424873"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42424873"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16"}}, "commit_id": "22498388099f815389340a378a6f73270e5f0540", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "PhotoFeed/app/src/main/res/layout/fragment_feed.xml", "position": 7, "original_commit_id": "22498388099f815389340a378a6f73270e5f0540", "id": 42424873}, {"original_position": 36, "diff_hunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+              android:layout_width=\"match_parent\"\n+              android:layout_height=\"match_parent\"\n+              android:paddingLeft=\"16dp\"\n+              android:paddingRight=\"16dp\"\n+              android:orientation=\"vertical\" >\n+\n+    <ImageView\n+        android:id=\"@+id/imageView1\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"0dp\"\n+        android:layout_weight=\"1\"/>\n+\n+    <LinearLayout\n+                  android:layout_width=\"match_parent\"\n+                  android:layout_height=\"wrap_content\"\n+                  android:orientation=\"horizontal\" >\n+\n+        <Button\n+            android:id=\"@+id/backBtn\"\n+            android:layout_weight=\"1\"\n+            android:layout_width=\"0dp\"\n+            android:layout_height=\"wrap_content\"\n+            android:layout_gravity=\"left\"\n+            android:text=\"Previous\" />\n+\n+        <Button\n+            android:id=\"@+id/nextBtn\"\n+            android:layout_weight=\"1\"\n+            android:layout_width=\"0dp\"\n+            android:layout_height=\"wrap_content\"\n+            android:layout_gravity=\"right\"\n+            android:text=\"Next\" />\n+    </LinearLayout>\n+", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42424992", "created_at": "2015-10-19T20:58:24Z", "body": "consider making a style if you have multiple components (like buttons) with a lot of similar features", "updated_at": "2015-10-19T20:58:24Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42424992", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42424992"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42424992"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16"}}, "commit_id": "22498388099f815389340a378a6f73270e5f0540", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "PhotoFeed/app/src/main/res/layout/fragment_feed.xml", "position": 36, "original_commit_id": "22498388099f815389340a378a6f73270e5f0540", "id": 42424992}, {"original_position": 27, "diff_hunk": "@@ -0,0 +1,28 @@\n+apply plugin: 'com.android.application'\n+\n+android {\n+    compileSdkVersion 23\n+    buildToolsVersion \"23.0.1\"\n+\n+    defaultConfig {\n+        applicationId \"com.mobileproto.david.photofeed\"\n+        minSdkVersion 15\n+        targetSdkVersion 23\n+        versionCode 1\n+        versionName \"1.0\"\n+    }\n+    buildTypes {\n+        release {\n+            minifyEnabled false\n+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n+        }\n+    }\n+\n+}\n+\n+dependencies {\n+    compile fileTree(dir: 'libs', include: ['*.jar'])\n+    compile 'com.android.support:appcompat-v7:23.0.1'\n+    compile 'org.apache.httpcomponents:httpclient-android:4.3.5.1'\n+    compile files('libs/volley.jar')", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42425246", "created_at": "2015-10-19T21:00:44Z", "body": "preferable to use the package over the jar file unless you have some particular reasoning,", "updated_at": "2015-10-19T21:00:44Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42425246", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42425246"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42425246"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16"}}, "commit_id": "22498388099f815389340a378a6f73270e5f0540", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "PhotoFeed/app/build.gradle", "position": 27, "original_commit_id": "22498388099f815389340a378a6f73270e5f0540", "id": 42425246}, {"original_position": 196, "diff_hunk": "@@ -0,0 +1,197 @@\n+package com.mobileproto.david.photofeed;\n+\n+import android.app.AlertDialog;\n+import android.content.DialogInterface;\n+import android.support.v4.app.Fragment;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.KeyEvent;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.view.inputmethod.EditorInfo;\n+import android.widget.AdapterView;\n+import android.widget.EditText;\n+import android.widget.GridView;\n+import android.widget.TextView;\n+\n+import com.android.volley.Request;\n+import com.android.volley.RequestQueue;\n+import com.android.volley.Response;\n+import com.android.volley.Response.ErrorListener;\n+import com.android.volley.VolleyError;\n+import com.android.volley.toolbox.JsonObjectRequest;\n+\n+import org.apache.http.client.utils.URIBuilder;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+\n+/**\n+ * This fragment is where the user searches for images. It has a gridview for displaying the images\n+ */\n+public class SearchFragment extends Fragment\n+{\n+\n+    private static final String DEBUG_TAG = \"searchFragmentDebug\";\n+    private static final String ERROR_TAG = \"searchFragmentError\";\n+    private static final String URLS_TAG = \"urls\";\n+    private static final String KEY = \"AIzaSyDYCakn7Ro2OySe2cLs1MHvVpN-x5HfO4k\";\n+    private static final String CX = \"016507790316430451546:c67etf_pbba\";\n+\n+    private ArrayList<String> urls;\n+\n+    private EditText searchText;\n+    private GridViewAdapter gridViewAdapter;\n+\n+    // The listener for the search text field\n+    private TextView.OnEditorActionListener searchListener = new TextView.OnEditorActionListener()\n+    {\n+\n+        @Override\n+        public boolean onEditorAction(TextView v, int actionId, KeyEvent event)\n+        {\n+            if (actionId == EditorInfo.IME_ACTION_SEARCH)\n+            {\n+                performSearch(v.getText().toString());\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    // The listener for when a volley request comes back (Google has returned images). Adds the urls\n+    // to the ArrayAdapter and notifies that data has changed.\n+    private Response.Listener listener = new Response.Listener<JSONObject>()\n+    {\n+        @Override\n+        public void onResponse(JSONObject response)\n+        {\n+            try\n+            {\n+                JSONArray images = response.getJSONArray(\"items\");\n+\n+                String[] imgURLs = new String[images.length()];\n+                for (int i = 0; i < imgURLs.length; i++)\n+                    imgURLs[i] = images.getJSONObject(i).getJSONObject(\"image\")\n+                            .getString(\"thumbnailLink\");\n+\n+                for (String url : imgURLs)\n+                    urls.add(url);\n+\n+                gridViewAdapter.notifyDataSetChanged();\n+\n+            } catch (JSONException e)\n+            {\n+                Log.e(ERROR_TAG, e.toString());\n+                ;\n+            }\n+        }\n+    };\n+\n+    // Long click listener for adding an image to a DB\n+    private AdapterView.OnItemLongClickListener longClick = new AdapterView.OnItemLongClickListener()\n+    {\n+        @Override\n+        public boolean onItemLongClick(AdapterView<?> parent, View view, final int position, long id)\n+        {\n+            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\n+            builder.setMessage(\"Added image to Feed\");\n+            builder.setPositiveButton(\"OK\", new DialogInterface.OnClickListener()\n+            {\n+                @Override\n+                public void onClick(DialogInterface dialog, int which)\n+                {\n+                    ((MainActivity) getActivity()).addUrlToDb(urls.get(position));\n+                    dialog.cancel();\n+                }\n+            });\n+            builder.setNegativeButton(\"Undo\", null);\n+            builder.show();\n+            return false;\n+        }\n+    };\n+\n+    public SearchFragment()\n+    {\n+    }\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                             Bundle savedInstanceState)\n+    {\n+\n+        // create references to the Search and adapter, and set listeners.\n+\n+        View view = inflater.inflate(R.layout.fragment_search, container, false);\n+        searchText = (EditText) view.findViewById(R.id.searchText);\n+        searchText.setOnEditorActionListener(searchListener);\n+\n+        if (savedInstanceState == null)\n+            urls = new ArrayList<>();\n+        else\n+            urls = savedInstanceState.getStringArrayList(URLS_TAG);\n+\n+        GridView gridView = (GridView) view.findViewById(R.id.gridView);\n+        gridViewAdapter = new GridViewAdapter(getActivity(), R.layout.grid_item_layout, urls);\n+        gridView.setAdapter(gridViewAdapter);\n+        gridView.setOnItemLongClickListener(longClick);\n+\n+        return view;\n+    }\n+\n+    @Override\n+    public void onSaveInstanceState(Bundle savedInstanceState)\n+    {\n+        // Save the current grocery list\n+        savedInstanceState.putStringArrayList(URLS_TAG, urls);\n+\n+        // Always call the superclass so it can save the view hierarchy state\n+        super.onSaveInstanceState(savedInstanceState);\n+    }\n+\n+    // This function is called every time the user presses search. Send a request to the Volley que\n+    // up in the MainActivity.\n+    private void performSearch(String search)\n+    {\n+        // searchText.clearFocus();\n+        RequestQueue mRequestQueue = ((MainActivity) getActivity()).getmRequestQueue();\n+        try\n+        {\n+            int[] startVals = {1, 11, 21};\n+            for (int i : startVals)\n+            {\n+                URI uri = new URIBuilder()\n+                        .setScheme(\"https\")\n+                        .setHost(\"www.googleapis.com\")\n+                        .setPath(\"/customsearch/v1\")\n+                        .setParameter(\"key\", KEY)\n+                        .setParameter(\"cx\", CX)\n+                        .setParameter(\"searchType\", \"image\")\n+                        .setParameter(\"q\", search)\n+                        .setParameter(\"start\", Integer.toString(i))\n+                        .build();\n+                String url = uri.toString();\n+                JsonObjectRequest jsObjRequest = new JsonObjectRequest(Request.Method.GET, url, null,\n+                        listener, new ErrorListener()\n+                {\n+                    @Override\n+                    public void onErrorResponse(VolleyError e)\n+                    {\n+                        Log.e(ERROR_TAG, e.toString());\n+                    }\n+                });\n+                mRequestQueue.add(jsObjRequest);\n+            }\n+        } catch (URISyntaxException e)\n+        {\n+            e.printStackTrace();\n+        } finally\n+        {\n+        }\n+    }", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42444018", "created_at": "2015-10-20T00:38:36Z", "body": "Thank Hayley!\n\nOn Mon, Oct 19, 2015 at 5:11 PM hhansson <notifications@github.com> wrote:\n\n> In\n> PhotoFeed/app/src/main/java/com/mobileproto/david/photofeed/SearchFragment.java\n> <https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42424802>:\n>\n> > +                {\n> > +                    @Override\n> > +                    public void onErrorResponse(VolleyError e)\n> > +                    {\n> > +                        Log.e(ERROR_TAG, e.toString());\n> > +                    }\n> > +                });\n> > +                mRequestQueue.add(jsObjRequest);\n> > +            }\n> > +        } catch (URISyntaxException e)\n> > +        {\n> > +            e.printStackTrace();\n> > +        } finally\n> > +        {\n> > +        }\n> > +    }\n>\n> All looks good! Interesting class layout.\n>\n> \u2014\n> Reply to this email directly or view it on GitHub\n> <https://github.com/OlinMobileProto/Lab2/pull/16/files#r42424802>.\n>\n", "updated_at": "2015-10-20T00:38:36Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42444018", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42444018"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/16#discussion_r42444018"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/16"}}, "commit_id": "22498388099f815389340a378a6f73270e5f0540", "user": {"following_url": "https://api.github.com/users/greneroom/following{/other_user}", "events_url": "https://api.github.com/users/greneroom/events{/privacy}", "organizations_url": "https://api.github.com/users/greneroom/orgs", "url": "https://api.github.com/users/greneroom", "gists_url": "https://api.github.com/users/greneroom/gists{/gist_id}", "html_url": "https://github.com/greneroom", "subscriptions_url": "https://api.github.com/users/greneroom/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/8933701?v=3", "repos_url": "https://api.github.com/users/greneroom/repos", "received_events_url": "https://api.github.com/users/greneroom/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/greneroom/starred{/owner}{/repo}", "site_admin": false, "login": "greneroom", "type": "User", "id": 8933701, "followers_url": "https://api.github.com/users/greneroom/followers"}, "path": "PhotoFeed/app/src/main/java/com/mobileproto/david/photofeed/SearchFragment.java", "position": 196, "original_commit_id": "22498388099f815389340a378a6f73270e5f0540", "id": 42444018}]