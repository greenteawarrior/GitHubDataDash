[{"original_position": 42, "diff_hunk": "@@ -0,0 +1,181 @@\n+package com.example.cynchen.googleinstagram;\n+\n+import android.app.AlertDialog;\n+import android.content.DialogInterface;\n+import android.support.v4.app.Fragment;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebView;\n+import android.widget.Button;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * A placeholder fragment containing a simple view.\n+ */\n+public class AllImagesFragment extends Fragment {\n+\n+    public AllImagesFragment() {\n+    }\n+\n+    public void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+    }\n+\n+    //Initialization of all of the buttons on the images page\n+    private Button nextbutton_all;\n+    private Button previousbutton_all;\n+    private Button switch_to_search;\n+    private Button remove_image;\n+\n+    //Initialization of webview to load url's into the view\n+    private WebView webView_all;\n+\n+    //Initialization of array list of all all saved images url (grabbed from db), and then index k to go through the list\n+    private ArrayList<String> saved_images_all;\n+    public int k;\n+\n+    //Calling FeedReaderdbHelper's dbhelper function\n+    private FeedReaderdbHelper dbhelper;", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42311297", "created_at": "2015-10-17T16:54:39Z", "body": "all of these declarations should technically be at the very top of the class", "updated_at": "2015-10-17T16:54:39Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42311297", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42311297"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42311297"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13"}}, "commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "GoogleInstagram/app/src/main/java/com/example/cynchen/googleinstagram/AllImagesFragment.java", "position": 42, "original_commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "id": 42311297}, {"original_position": 87, "diff_hunk": "@@ -0,0 +1,181 @@\n+package com.example.cynchen.googleinstagram;\n+\n+import android.app.AlertDialog;\n+import android.content.DialogInterface;\n+import android.support.v4.app.Fragment;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebView;\n+import android.widget.Button;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * A placeholder fragment containing a simple view.\n+ */\n+public class AllImagesFragment extends Fragment {\n+\n+    public AllImagesFragment() {\n+    }\n+\n+    public void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+    }\n+\n+    //Initialization of all of the buttons on the images page\n+    private Button nextbutton_all;\n+    private Button previousbutton_all;\n+    private Button switch_to_search;\n+    private Button remove_image;\n+\n+    //Initialization of webview to load url's into the view\n+    private WebView webView_all;\n+\n+    //Initialization of array list of all all saved images url (grabbed from db), and then index k to go through the list\n+    private ArrayList<String> saved_images_all;\n+    public int k;\n+\n+    //Calling FeedReaderdbHelper's dbhelper function\n+    private FeedReaderdbHelper dbhelper;\n+\n+    //ONCREATE: Begin\n+    @Override public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                                       Bundle savedInstanceState) {\n+\n+        View rootView = inflater.inflate(R.layout.fragment_allimages, container, false);\n+\n+        //Connects webview variable with webview from layout, and dbhelper from FeedReaderdbHelper\n+        webView_all = (WebView) rootView.findViewById(R.id.viewimage_all);\n+        dbhelper = new FeedReaderdbHelper(getActivity());\n+\n+        //Make an array of saved images by reading the database\n+        saved_images_all = new ArrayList<String>(dbhelper.readData());\n+        k = 0; //initialize k to be 0\n+\n+        //First step, check if there is anything in saved_images_all, or else the app will crash trying to\n+        //index from something with a size 0\n+        if (saved_images_all.size() == 0){\n+                webView_all.loadUrl(\"about:blank\"); //nothing: put blank webview\n+        }\n+        else {\n+            webView_all.loadUrl(saved_images_all.get(0)); //something: show the first image\n+        }\n+\n+        //If next button is clicked, there are different scenarios that could happen\n+        //One: 0 images saved -> alert dialog notifying user to save an image pops up\n+        //Two: 1 image saved -> do nothing, keep loading that one image\n+        //Three: k is at the last image of the list -> go to the 0th image\n+        //Four: All other k index values -> load the (k+1)th image\n+        nextbutton_all = (Button) rootView.findViewById(R.id.next_image_all);\n+        nextbutton_all.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                if (saved_images_all.size() == 0) {\n+                    create_alert_all_images(); //alert dialog creation function\n+                }\n+                else if (saved_images_all.size() == 1){\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+                else if (saved_images_all.size() - 1 == k){\n+                    k = 0;\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+                else {\n+                    k += 1;", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42311451", "created_at": "2015-10-17T17:10:40Z", "body": "good place for a switch statement for more readability ", "updated_at": "2015-10-17T17:10:40Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42311451", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42311451"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42311451"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13"}}, "commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "GoogleInstagram/app/src/main/java/com/example/cynchen/googleinstagram/AllImagesFragment.java", "position": 87, "original_commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "id": 42311451}, {"original_position": 114, "diff_hunk": "@@ -0,0 +1,181 @@\n+package com.example.cynchen.googleinstagram;\n+\n+import android.app.AlertDialog;\n+import android.content.DialogInterface;\n+import android.support.v4.app.Fragment;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebView;\n+import android.widget.Button;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * A placeholder fragment containing a simple view.\n+ */\n+public class AllImagesFragment extends Fragment {\n+\n+    public AllImagesFragment() {\n+    }\n+\n+    public void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+    }\n+\n+    //Initialization of all of the buttons on the images page\n+    private Button nextbutton_all;\n+    private Button previousbutton_all;\n+    private Button switch_to_search;\n+    private Button remove_image;\n+\n+    //Initialization of webview to load url's into the view\n+    private WebView webView_all;\n+\n+    //Initialization of array list of all all saved images url (grabbed from db), and then index k to go through the list\n+    private ArrayList<String> saved_images_all;\n+    public int k;\n+\n+    //Calling FeedReaderdbHelper's dbhelper function\n+    private FeedReaderdbHelper dbhelper;\n+\n+    //ONCREATE: Begin\n+    @Override public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                                       Bundle savedInstanceState) {\n+\n+        View rootView = inflater.inflate(R.layout.fragment_allimages, container, false);\n+\n+        //Connects webview variable with webview from layout, and dbhelper from FeedReaderdbHelper\n+        webView_all = (WebView) rootView.findViewById(R.id.viewimage_all);\n+        dbhelper = new FeedReaderdbHelper(getActivity());\n+\n+        //Make an array of saved images by reading the database\n+        saved_images_all = new ArrayList<String>(dbhelper.readData());\n+        k = 0; //initialize k to be 0\n+\n+        //First step, check if there is anything in saved_images_all, or else the app will crash trying to\n+        //index from something with a size 0\n+        if (saved_images_all.size() == 0){\n+                webView_all.loadUrl(\"about:blank\"); //nothing: put blank webview\n+        }\n+        else {\n+            webView_all.loadUrl(saved_images_all.get(0)); //something: show the first image\n+        }\n+\n+        //If next button is clicked, there are different scenarios that could happen\n+        //One: 0 images saved -> alert dialog notifying user to save an image pops up\n+        //Two: 1 image saved -> do nothing, keep loading that one image\n+        //Three: k is at the last image of the list -> go to the 0th image\n+        //Four: All other k index values -> load the (k+1)th image\n+        nextbutton_all = (Button) rootView.findViewById(R.id.next_image_all);\n+        nextbutton_all.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                if (saved_images_all.size() == 0) {\n+                    create_alert_all_images(); //alert dialog creation function\n+                }\n+                else if (saved_images_all.size() == 1){\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+                else if (saved_images_all.size() - 1 == k){\n+                    k = 0;\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+                else {\n+                    k += 1;\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+            }\n+        });\n+\n+        //If previous button is clicked, there are different scenarios that could happen:\n+        //One: 0 images saved -> popup alert dialog again\n+        //Two: 1 image saved -> do nothing, keep loading that one image\n+        //Three: k is at the first image of the list -> go to the last image\n+        //Four: All other k index values -> load the (k-1)th image\n+        previousbutton_all = (Button) rootView.findViewById(R.id.previous_image_all);\n+        previousbutton_all.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                if (saved_images_all.size() == 0){\n+                    create_alert_all_images(); //alert dialog creation function\n+                }\n+                else if (saved_images_all.size() == 1){\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+                else if (k == 0){\n+                    k = saved_images_all.size()-1;\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+                else {\n+                    k -= 1;\n+                    webView_all.loadUrl(saved_images_all.get(k));", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42311521", "created_at": "2015-10-17T17:17:27Z", "body": "This and the next button could be consolidated a lot. Anytime you feel like you are writing the same code as you already have for more than a couple lines, look into consolidating. ", "updated_at": "2015-10-17T17:17:27Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42311521", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42311521"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42311521"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13"}}, "commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "GoogleInstagram/app/src/main/java/com/example/cynchen/googleinstagram/AllImagesFragment.java", "position": 114, "original_commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "id": 42311521}, {"original_position": 153, "diff_hunk": "@@ -0,0 +1,181 @@\n+package com.example.cynchen.googleinstagram;\n+\n+import android.app.AlertDialog;\n+import android.content.DialogInterface;\n+import android.support.v4.app.Fragment;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebView;\n+import android.widget.Button;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * A placeholder fragment containing a simple view.\n+ */\n+public class AllImagesFragment extends Fragment {\n+\n+    public AllImagesFragment() {\n+    }\n+\n+    public void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+    }\n+\n+    //Initialization of all of the buttons on the images page\n+    private Button nextbutton_all;\n+    private Button previousbutton_all;\n+    private Button switch_to_search;\n+    private Button remove_image;\n+\n+    //Initialization of webview to load url's into the view\n+    private WebView webView_all;\n+\n+    //Initialization of array list of all all saved images url (grabbed from db), and then index k to go through the list\n+    private ArrayList<String> saved_images_all;\n+    public int k;\n+\n+    //Calling FeedReaderdbHelper's dbhelper function\n+    private FeedReaderdbHelper dbhelper;\n+\n+    //ONCREATE: Begin\n+    @Override public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                                       Bundle savedInstanceState) {\n+\n+        View rootView = inflater.inflate(R.layout.fragment_allimages, container, false);\n+\n+        //Connects webview variable with webview from layout, and dbhelper from FeedReaderdbHelper\n+        webView_all = (WebView) rootView.findViewById(R.id.viewimage_all);\n+        dbhelper = new FeedReaderdbHelper(getActivity());\n+\n+        //Make an array of saved images by reading the database\n+        saved_images_all = new ArrayList<String>(dbhelper.readData());\n+        k = 0; //initialize k to be 0\n+\n+        //First step, check if there is anything in saved_images_all, or else the app will crash trying to\n+        //index from something with a size 0\n+        if (saved_images_all.size() == 0){\n+                webView_all.loadUrl(\"about:blank\"); //nothing: put blank webview\n+        }\n+        else {\n+            webView_all.loadUrl(saved_images_all.get(0)); //something: show the first image\n+        }\n+\n+        //If next button is clicked, there are different scenarios that could happen\n+        //One: 0 images saved -> alert dialog notifying user to save an image pops up\n+        //Two: 1 image saved -> do nothing, keep loading that one image\n+        //Three: k is at the last image of the list -> go to the 0th image\n+        //Four: All other k index values -> load the (k+1)th image\n+        nextbutton_all = (Button) rootView.findViewById(R.id.next_image_all);\n+        nextbutton_all.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                if (saved_images_all.size() == 0) {\n+                    create_alert_all_images(); //alert dialog creation function\n+                }\n+                else if (saved_images_all.size() == 1){\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+                else if (saved_images_all.size() - 1 == k){\n+                    k = 0;\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+                else {\n+                    k += 1;\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+            }\n+        });\n+\n+        //If previous button is clicked, there are different scenarios that could happen:\n+        //One: 0 images saved -> popup alert dialog again\n+        //Two: 1 image saved -> do nothing, keep loading that one image\n+        //Three: k is at the first image of the list -> go to the last image\n+        //Four: All other k index values -> load the (k-1)th image\n+        previousbutton_all = (Button) rootView.findViewById(R.id.previous_image_all);\n+        previousbutton_all.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                if (saved_images_all.size() == 0){\n+                    create_alert_all_images(); //alert dialog creation function\n+                }\n+                else if (saved_images_all.size() == 1){\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+                else if (k == 0){\n+                    k = saved_images_all.size()-1;\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+                else {\n+                    k -= 1;\n+                    webView_all.loadUrl(saved_images_all.get(k));\n+                }\n+            }\n+        });\n+\n+        //Removing images: 1. remove from database, 2. remove from list of saved images\n+        //One: 0 images saved -> popup alert dialog again\n+        //Two: Removed image is the last image of the list -> remove that image from db and arraylist, then check if the\n+        //new arraylist size is zero (in this case, load blank webview) or not (in this case, load the first image of the new list)\n+        //Three: For all other k values -> delete from db and arraylist, then check if the new arraylist is zero (in this case, load blank\n+        //webview) or not (in this case, load the new kth value of the shifted list)\n+        remove_image = (Button) rootView.findViewById(R.id.remove_image_button);\n+        remove_image.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                if (saved_images_all.size() == 0){\n+                    create_alert_all_images();\n+                }\n+                else if (k == saved_images_all.size()-1){\n+                    dbhelper.deleteData(saved_images_all.get(k));\n+                    saved_images_all.remove(saved_images_all.get(k));\n+                    if (saved_images_all.size() == 0) {\n+                        webView_all.loadUrl(\"about:blank\");\n+                    }\n+                    else {\n+                        webView_all.loadUrl(saved_images_all.get(0));\n+                    }\n+                }\n+                else {\n+                    dbhelper.deleteData(saved_images_all.get(k));\n+                    saved_images_all.remove(saved_images_all.get(k));\n+                    if (saved_images_all.size() == 0) {\n+                        webView_all.loadUrl(\"about:blank\");\n+                    }\n+                    else {\n+                        webView_all.loadUrl(saved_images_all.get(k));\n+                    }\n+                }\n+            }\n+        });", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42311556", "created_at": "2015-10-17T17:21:22Z", "body": "move all of this button logic for all buttons out of onCreateView. This function should not be longer than your screen (you should be able to see the opening and closing {}s of the function on your screen.", "updated_at": "2015-10-17T17:21:22Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42311556", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42311556"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42311556"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13"}}, "commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "GoogleInstagram/app/src/main/java/com/example/cynchen/googleinstagram/AllImagesFragment.java", "position": 153, "original_commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "id": 42311556}, {"original_position": 86, "diff_hunk": "@@ -0,0 +1,88 @@\n+package com.example.cynchen.googleinstagram;\n+\n+import android.content.ContentValues;\n+import android.content.Context;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.util.Log;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * Created by cynchen on 9/13/15.\n+ */\n+public class FeedReaderdbHelper extends SQLiteOpenHelper {\n+\n+\n+    // If you change the database schema, you must increment the database version.\n+    public static final int DATABASE_VERSION = 1;\n+    public static final String DATABASE_NAME = \"FeedReaderGoogleInstagram.db\";\n+    public SQLiteDatabase dbwrite = getWritableDatabase();\n+    public SQLiteDatabase dbread = getReadableDatabase();\n+\n+    public FeedReaderdbHelper(Context context) {\n+        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n+    }\n+    public void onCreate(SQLiteDatabase db) {\n+        db.execSQL(com.example.cynchen.googleinstagram.FeedEntry.SQL_CREATE_ENTRIES);\n+    }\n+    public void deleteData(String item) {\n+        dbwrite.delete(com.example.cynchen.googleinstagram.FeedEntry.TABLE_NAME, com.example.cynchen.googleinstagram.FeedEntry.ITEM_URL + \"=?\", new String[]{item});\n+    }\n+    public void writeData(String item) {\n+\n+        // Create a new map of values, where column names are the keys\n+        ContentValues values = new ContentValues();\n+        values.put(com.example.cynchen.googleinstagram.FeedEntry.ITEM_URL, item);\n+\n+        // Insert the new row, returning the primary key value of the new row\n+        long newRowId;\n+        newRowId = dbwrite.insert(\n+                com.example.cynchen.googleinstagram.FeedEntry.TABLE_NAME,\n+                null,\n+                values);\n+    }\n+    public ArrayList<String> readData(){\n+\n+        // Define a projection that specifies which columns from the database\n+        // you will actually use after this query.\n+        String[] projection = {\n+                com.example.cynchen.googleinstagram.FeedEntry._ID,\n+                com.example.cynchen.googleinstagram.FeedEntry.ITEM_URL};\n+\n+\n+        Cursor c = dbread.query(\n+                com.example.cynchen.googleinstagram.FeedEntry.TABLE_NAME,  // The table to query\n+                projection,                               // The columns to return\n+                null,                                // The columns for the WHERE clause\n+                null,                            // The values for the WHERE clause\n+                null,                                     // don't group the rows\n+                null,                                     // don't filter by row groups\n+                null                                 // The sort order\n+        );\n+        ArrayList<String> results = new ArrayList<String>(); //arraylist where db entities will be stored is created\n+        String array[] = new String[c.getCount()];\n+        int i = 0;\n+\n+        c.moveToFirst();\n+        while (!c.isAfterLast()) {\n+            array[i] = c.getString(0);\n+            results.add(c.getString(1)); //arraylist of results has the db entities added\n+            i++;\n+            c.moveToNext();\n+        }\n+        return results; //returns the db into arraylist that will be printed by the main activity on create\n+    }\n+\n+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n+        // This database is only a cache for online data, so its upgrade policy is\n+        // to simply to discard the data and start over\n+        db.execSQL(com.example.cynchen.googleinstagram.FeedEntry.SQL_DELETE_ENTRIES);\n+        onCreate(db);\n+    }\n+    public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n+        onUpgrade(db, oldVersion, newVersion);\n+    }", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42311626", "created_at": "2015-10-17T17:25:58Z", "body": "All looks good!", "updated_at": "2015-10-17T17:25:58Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42311626", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42311626"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42311626"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13"}}, "commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "GoogleInstagram/app/src/main/java/com/example/cynchen/googleinstagram/FeedReaderdbHelper.java", "position": 86, "original_commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "id": 42311626}, {"original_position": 160, "diff_hunk": "@@ -0,0 +1,175 @@\n+package com.example.cynchen.googleinstagram;\n+\n+import android.app.AlertDialog;\n+import android.content.DialogInterface;\n+import android.support.v4.app.Fragment;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebView;\n+import android.widget.Button;\n+import android.widget.EditText;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * A placeholder fragment containing a simple view.\n+ */\n+public class SearchFragment extends Fragment {\n+\n+    public SearchFragment() {\n+    }\n+\n+    public void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+    }\n+\n+    //Initialization of all of the buttons on the search for image page\n+    private Button searchbutton; //the Add to List button\n+    private Button nextbutton;\n+    private Button previousbutton;\n+    private Button savebutton;\n+    private Button view_allbutton;\n+\n+    private EditText editsearch; //the search edit text box\n+\n+    //Initialization of webview to load url's into the view\n+    private WebView webView;\n+\n+    //Initialization of array list of all all saved images url (grabbed from db), and then index j to go through the list\n+    private ArrayList<String> array_images;\n+    public int j;\n+\n+    //Calling FeedReaderdbHelper's dbhelper function\n+    private FeedReaderdbHelper dbhelper;\n+\n+    //ONCREATE: Begin\n+    @Override public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                                       Bundle savedInstanceState) {\n+        View rootView = inflater.inflate(R.layout.fragment_search, container, false);\n+\n+        //Connects webview variable with webview from layout, editsearch with the edittext box, and dbhelper from FeedReaderdbHelper\n+        editsearch = (EditText) rootView.findViewById(R.id.inputsearch);\n+        webView = (WebView) rootView.findViewById(R.id.viewimage);\n+        dbhelper = new FeedReaderdbHelper(getActivity()); //readDB is connected to FeedReaderDbHelper in this function\n+\n+        //Make an array of images that will be filled with the results of the custom search, and initialize j to be 0\n+        array_images = new ArrayList<String>();\n+        j = 0;\n+\n+        //When search button is clicked, the text typed into the edittext field will be obtained and then put into the\n+        //GoogleImageGrabber class, which will output from callback an arraylist of google images url from custom search\n+        searchbutton = (Button) rootView.findViewById(R.id.search_button);\n+        searchbutton.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                String str = editsearch.getText().toString(); //grabs the particular item name string\n+                GoogleImageGrabber handler = new GoogleImageGrabber(getActivity());\n+                //checks that there is even a string\n+                if (str.length() == 0){\n+                    create_alert_search();\n+                }\n+                else {\n+                    handler.searchGoogle(str, new searchcallback() {\n+                        @Override\n+                        public void callback(ArrayList<String> googleimagesreturn) {\n+                            array_images = googleimagesreturn; //fill our arraylist with the output of the callback\n+                            webView.loadUrl(googleimagesreturn.get(j)); //load the first (0th) image of the arraylist on the webview\n+                            Log.d(\"Success\", googleimagesreturn.toString());\n+                        }\n+                    });\n+                }\n+            }\n+        });\n+\n+        //If next button is clicked, there are different scenarios that could happen\n+        //One: 0 images in the arraylist (from not searching) -> alert dialog notifying user to search for an image pops up\n+        //Two: j is at the last image of the list -> go to the 0th image\n+        //Three: All other j index values -> load the (j+1)th image\n+        nextbutton = (Button) rootView.findViewById(R.id.next_image);\n+        nextbutton.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                if (array_images.size() == 0) {\n+                    create_alert_search();\n+                }\n+                else if (array_images.size() - 1 == j){\n+                    j = 0;\n+                    webView.loadUrl(array_images.get(j));\n+                }\n+                else {\n+                    j += 1;\n+                    webView.loadUrl(array_images.get(j));\n+                    Log.v(\"Yes:\", Integer.toString(j));\n+                }\n+            }\n+        });\n+\n+        //If previous button is clicked, there are different scenarios that could happen:\n+        //One: 0 images saved -> popup alert dialog again\n+        //Two: j is at the first image of the list -> go to the last image of list\n+        //Three: All other j index values -> load the (j-1)th image\n+        previousbutton = (Button) rootView.findViewById(R.id.previous_image);\n+        previousbutton.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                if (array_images.size() == 0) {\n+                    create_alert_search();\n+                }\n+                else if (j == 0){\n+                    j = array_images.size()-1;\n+                    webView.loadUrl(array_images.get(j));\n+                }\n+                else {\n+                    j -= 1;\n+                    webView.loadUrl(array_images.get(j));\n+                    Log.v(\"Before:\", Integer.toString(j));\n+                }\n+            }\n+        });\n+\n+        //When the savebutton is clicked when there was no search, popup appears\n+        //Else: get that particular image url and write it into the database using dbhelper\n+        savebutton = (Button) rootView.findViewById(R.id.save_button);\n+        savebutton.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                if (array_images.size() == 0){\n+                    create_alert_search();\n+                }\n+                else {\n+                    dbhelper.writeData(array_images.get(j));\n+                }\n+            }\n+        });\n+\n+        //When you want to switch layout back to view all images: Uses the main activity\n+        //function \"transitionToFragment\", with the AllImagesFragment fragment\n+        view_allbutton = (Button) rootView.findViewById(R.id.view_all_button);\n+        view_allbutton.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                AllImagesFragment fr = new AllImagesFragment();\n+                ((MainActivity)getActivity()).transitionToFragment(fr);\n+            }\n+        });\n+\n+        return rootView;\n+    }", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42420082", "created_at": "2015-10-19T20:16:04Z", "body": "This method needs to be a lot shorter. you can make all of these onClicks more organized and independent of the method by using butterknife. ", "updated_at": "2015-10-19T20:16:04Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42420082", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42420082"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42420082"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13"}}, "commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "GoogleInstagram/app/src/main/java/com/example/cynchen/googleinstagram/SearchFragment.java", "position": 160, "original_commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "id": 42420082}, {"original_position": 54, "diff_hunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:paddingLeft=\"16dp\"\n+    android:paddingRight=\"16dp\"\n+    android:paddingTop=\"16dp\"\n+    android:paddingBottom=\"16dp\"\n+    tools:context=\".AllImagesFragment\">\n+\n+    <TextView android:text=\"@string/all_images_welcome_message\" android:layout_width=\"wrap_content\"\n+        android:layout_height=\"wrap_content\" android:id=\"@+id/all_images_message\"/>\n+\n+    <WebView\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"235dp\"\n+        android:layout_marginTop=\"20dp\"\n+        android:id=\"@+id/viewimage_all\"/>\n+\n+    <Button\n+        android:layout_width=\"wrap_content\"\n+        android:layout_height=\"50dp\"\n+        android:text=\"@string/next_button\"\n+        android:layout_below=\"@id/viewimage_all\"\n+        android:layout_alignParentRight=\"true\"\n+        android:layout_alignParentEnd=\"true\"\n+        android:id=\"@+id/next_image_all\"/>\n+\n+    <Button\n+        android:layout_width=\"wrap_content\"\n+        android:layout_height=\"50dp\"\n+        android:text=\"@string/previous_button\"\n+        android:layout_below=\"@id/viewimage_all\"\n+        android:id=\"@+id/previous_image_all\"\n+        android:layout_toLeftOf=\"@id/next_image_all\"\n+        android:layout_toStartOf=\"@id/next_image_all\"/>\n+\n+    <Button\n+        android:layout_width=\"wrap_content\"\n+        android:layout_alignParentRight=\"true\"\n+        android:layout_alignParentEnd=\"true\"\n+        android:layout_height=\"50dp\"\n+        android:text=\"@string/remove_image_button\"\n+        android:layout_below=\"@id/previous_image_all\"\n+        android:id=\"@+id/remove_image_button\"/>\n+\n+    <Button\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"50dp\"\n+        android:text=\"@string/go_to_search_button\"\n+        android:layout_alignParentBottom=\"true\"\n+        android:id=\"@+id/search_images_button\"/>\n+", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42421425", "created_at": "2015-10-19T20:27:32Z", "body": "you could create a style for your buttons (since they have similar traits) to conserve space and make this a bit cleaner. it would also save you some time.", "updated_at": "2015-10-19T20:27:32Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42421425", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42421425"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42421425"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13"}}, "commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "GoogleInstagram/app/src/main/res/layout/fragment_allimages.xml", "position": 54, "original_commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "id": 42421425}, {"original_position": 64, "diff_hunk": "@@ -0,0 +1,65 @@\n+<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\" android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n+    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n+    android:paddingTop=\"@dimen/activity_vertical_margin\"\n+    android:paddingBottom=\"@dimen/activity_vertical_margin\" tools:context=\".SearchFragment\">\n+\n+    <TextView android:text=\"@string/image_search\" android:layout_width=\"wrap_content\"\n+        android:layout_height=\"wrap_content\" android:id=\"@+id/welcome\"/>\n+\n+    <EditText\n+        android:id=\"@+id/inputsearch\"\n+        android:layout_width=\"225dp\"\n+        android:layout_height=\"50dp\"\n+        android:layout_below=\"@id/welcome\"/>\n+\n+    <Button\n+        android:layout_width=\"100dp\"\n+        android:layout_height=\"50dp\"\n+        android:layout_toRightOf=\"@id/inputsearch\"\n+        android:layout_toEndOf=\"@id/inputsearch\"\n+        android:text=\"@string/searchbuttontext\"\n+        android:layout_below=\"@id/welcome\"\n+        android:id=\"@+id/search_button\"/>\n+    \n+    <WebView\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"235dp\"\n+        android:layout_marginTop=\"20dp\"\n+        android:layout_below=\"@id/inputsearch\"\n+        android:id=\"@+id/viewimage\"/>\n+\n+    <Button\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"50dp\"\n+        android:text=\"@string/view_all_text\"\n+        android:layout_alignParentBottom=\"true\"\n+        android:id=\"@+id/view_all_button\"/>\n+\n+    <Button\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"50dp\"\n+        android:text=\"@string/savebutton\"\n+        android:layout_above=\"@id/view_all_button\"\n+        android:id=\"@+id/save_button\"/>\n+\n+    <Button\n+        android:layout_width=\"wrap_content\"\n+        android:layout_height=\"50dp\"\n+        android:text=\"@string/next_button\"\n+        android:layout_below=\"@id/viewimage\"\n+        android:layout_alignParentRight=\"true\"\n+        android:layout_alignParentEnd=\"true\"\n+        android:id=\"@+id/next_image\"/>\n+\n+    <Button\n+        android:layout_width=\"wrap_content\"\n+        android:layout_height=\"50dp\"\n+        android:text=\"@string/previous_button\"\n+        android:layout_below=\"@id/viewimage\"\n+        android:id=\"@+id/previous_image\"\n+        android:layout_toLeftOf=\"@id/next_image\"\n+        android:layout_toStartOf=\"@id/next_image\"/>\n+", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42421526", "created_at": "2015-10-19T20:28:25Z", "body": "these could fall under the previously suggested style- more time saved!", "updated_at": "2015-10-19T20:28:25Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42421526", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42421526"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42421526"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13"}}, "commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "GoogleInstagram/app/src/main/res/layout/fragment_search.xml", "position": 64, "original_commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "id": 42421526}, {"original_position": 8, "diff_hunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:paddingLeft=\"16dp\"\n+    android:paddingRight=\"16dp\"\n+    android:paddingTop=\"16dp\"", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42421643", "created_at": "2015-10-19T20:29:28Z", "body": "use dimens.xml for everything that is <some number>dp", "updated_at": "2015-10-19T20:29:28Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42421643", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42421643"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/13#discussion_r42421643"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/13"}}, "commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "user": {"following_url": "https://api.github.com/users/hhansson/following{/other_user}", "events_url": "https://api.github.com/users/hhansson/events{/privacy}", "organizations_url": "https://api.github.com/users/hhansson/orgs", "url": "https://api.github.com/users/hhansson", "gists_url": "https://api.github.com/users/hhansson/gists{/gist_id}", "html_url": "https://github.com/hhansson", "subscriptions_url": "https://api.github.com/users/hhansson/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5475041?v=3", "repos_url": "https://api.github.com/users/hhansson/repos", "received_events_url": "https://api.github.com/users/hhansson/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/hhansson/starred{/owner}{/repo}", "site_admin": false, "login": "hhansson", "type": "User", "id": 5475041, "followers_url": "https://api.github.com/users/hhansson/followers"}, "path": "GoogleInstagram/app/src/main/res/layout/fragment_allimages.xml", "position": 8, "original_commit_id": "39dbdf80828d241ef77f3935e43f38018bd3ae9c", "id": 42421643}]