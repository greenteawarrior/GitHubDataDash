[{"original_position": 28, "diff_hunk": "@@ -0,0 +1,29 @@\n+apply plugin: 'com.android.application'\n+\n+android {\n+    compileSdkVersion 23\n+    buildToolsVersion \"23.0.1\"\n+\n+    defaultConfig {\n+        applicationId \"com.mycompany.imageview\"\n+        minSdkVersion 15\n+        targetSdkVersion 23\n+        versionCode 1\n+        versionName \"1.0\"\n+    }\n+    buildTypes {\n+        release {\n+            minifyEnabled false\n+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n+        }\n+    }\n+}\n+\n+dependencies {\n+    compile fileTree(dir: 'libs', include: ['*.jar'])\n+    compile 'com.android.support:appcompat-v7:23.0.1'\n+    compile 'com.android.support:support-v4:23.0.1'\n+    compile 'com.google.android.gms:play-services:7.8.0'\n+//    compile 'com.mcxiaoke.volley:library:1.0.19'\n+    compile files('libs/volley.jar')", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42177713", "created_at": "2015-10-15T20:44:20Z", "body": "You shouldn't have to compile the volley jar if you have the first line.", "updated_at": "2015-10-15T20:44:20Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42177713", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42177713"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42177713"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/build.gradle", "position": 28, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42177713}, {"original_position": 117, "diff_hunk": "@@ -0,0 +1,143 @@\n+package com.mycompany.imageview;\n+\n+import android.os.Bundle;\n+import android.support.v4.app.Fragment;\n+import android.support.v4.app.FragmentManager;\n+import android.support.v4.app.FragmentTransaction;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+import android.widget.Button;\n+\n+import java.util.List;\n+\n+/**\n+ * A placeholder fragment containing a simple view.\n+ */\n+public class Library_fragment extends Fragment {\n+\n+    public Library_fragment() {\n+    }\n+    private String TAG = \"library_fragment\";\n+    private WebView mWebView;\n+    private int pointer;\n+    private String link;\n+    private MySQLiteHelper db;\n+    List<Image_DB> Image_list;\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                             Bundle savedInstanceState) {\n+        View rootview = inflater.inflate(R.layout.fragment_library_fragment, container, false);\n+\n+        db = new MySQLiteHelper(getActivity());\n+        Image_list = db.get_all_images();\n+\n+        create_webview(rootview);\n+        create_button(rootview, \"google\");\n+        create_button(rootview, \"next\");\n+        create_button(rootview, \"previous\");\n+        create_button(rootview, \"delete\");\n+\n+        return rootview;\n+    }\n+\n+\n+    public  void create_webview(View view){\n+        mWebView = (WebView)view.findViewById(R.id.library_webview);\n+\n+        // Enable Javascript\n+        WebSettings webSettings = mWebView.getSettings();\n+        webSettings.setJavaScriptEnabled(true);\n+        webSettings.setBuiltInZoomControls(true);\n+        webSettings.setUseWideViewPort(true);\n+        webSettings.setLoadWithOverviewMode(true);\n+        link =\"http://www.canon-europe.com/images/Android-logo_tcm13-1232684.png\";\n+        mWebView.loadUrl(link);\n+    }\n+\n+\n+    public void create_button(View v, String button){\n+        Button button_search;\n+        button_search=(Button)v.findViewById(R.id.button_search);\n+        button_search.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                transitionToFragment();\n+            }\n+        });\n+\n+        if (button.equals(\"next\") ){\n+            Button button_next;\n+            button_search = (Button) v.findViewById(R.id.button_library_next);\n+\n+            button_search.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    Log.d(TAG, \"next \");\n+                    pointer+=1;\n+                    reload_webview();\n+                }\n+            });\n+        }\n+        if (button.equals(\"previous\") ){\n+            Button button_previous;\n+            button_search = (Button) v.findViewById(R.id.button_library_previous);\n+\n+            button_search.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    Log.d(TAG, \"previous\");\n+                    pointer-=1;\n+                    reload_webview();\n+                }\n+            });\n+        }\n+        if (button.equals(\"delete\") ){\n+            Button button_delete;\n+            button_search = (Button) v.findViewById(R.id.button_delete);\n+\n+            button_search.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    try {\n+                        db.deleteImage(Image_list.get(pointer % Image_list.size()));\n+                    }\n+                    catch (Exception e){\n+                        Log.d(TAG, e.getMessage());\n+                    };\n+                    Image_list = db.get_all_images();\n+                }\n+            });\n+        }\n+\n+    }", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178102", "created_at": "2015-10-15T20:47:27Z", "body": "Interesting way of creating a single method for all button creation. It might be cleaner if each was its own method.", "updated_at": "2015-10-15T20:47:27Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178102", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178102"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178102"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/Library_fragment.java", "position": 117, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42178102}, {"original_position": 58, "diff_hunk": "@@ -0,0 +1,143 @@\n+package com.mycompany.imageview;\n+\n+import android.os.Bundle;\n+import android.support.v4.app.Fragment;\n+import android.support.v4.app.FragmentManager;\n+import android.support.v4.app.FragmentTransaction;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+import android.widget.Button;\n+\n+import java.util.List;\n+\n+/**\n+ * A placeholder fragment containing a simple view.\n+ */\n+public class Library_fragment extends Fragment {\n+\n+    public Library_fragment() {\n+    }\n+    private String TAG = \"library_fragment\";\n+    private WebView mWebView;\n+    private int pointer;\n+    private String link;\n+    private MySQLiteHelper db;\n+    List<Image_DB> Image_list;\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                             Bundle savedInstanceState) {\n+        View rootview = inflater.inflate(R.layout.fragment_library_fragment, container, false);\n+\n+        db = new MySQLiteHelper(getActivity());\n+        Image_list = db.get_all_images();\n+\n+        create_webview(rootview);\n+        create_button(rootview, \"google\");\n+        create_button(rootview, \"next\");\n+        create_button(rootview, \"previous\");\n+        create_button(rootview, \"delete\");\n+\n+        return rootview;\n+    }\n+\n+\n+    public  void create_webview(View view){\n+        mWebView = (WebView)view.findViewById(R.id.library_webview);\n+\n+        // Enable Javascript\n+        WebSettings webSettings = mWebView.getSettings();\n+        webSettings.setJavaScriptEnabled(true);\n+        webSettings.setBuiltInZoomControls(true);\n+        webSettings.setUseWideViewPort(true);\n+        webSettings.setLoadWithOverviewMode(true);\n+        link =\"http://www.canon-europe.com/images/Android-logo_tcm13-1232684.png\";", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178172", "created_at": "2015-10-15T20:48:02Z", "body": "Good job with the default image. Maybe make it more descriptive, 'No images in feed\" etc.", "updated_at": "2015-10-15T20:48:23Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178172", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178172"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178172"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/Library_fragment.java", "position": 58, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42178172}, {"original_position": 129, "diff_hunk": "@@ -0,0 +1,143 @@\n+package com.mycompany.imageview;\n+\n+import android.os.Bundle;\n+import android.support.v4.app.Fragment;\n+import android.support.v4.app.FragmentManager;\n+import android.support.v4.app.FragmentTransaction;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+import android.widget.Button;\n+\n+import java.util.List;\n+\n+/**\n+ * A placeholder fragment containing a simple view.\n+ */\n+public class Library_fragment extends Fragment {\n+\n+    public Library_fragment() {\n+    }\n+    private String TAG = \"library_fragment\";\n+    private WebView mWebView;\n+    private int pointer;\n+    private String link;\n+    private MySQLiteHelper db;\n+    List<Image_DB> Image_list;\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                             Bundle savedInstanceState) {\n+        View rootview = inflater.inflate(R.layout.fragment_library_fragment, container, false);\n+\n+        db = new MySQLiteHelper(getActivity());\n+        Image_list = db.get_all_images();\n+\n+        create_webview(rootview);\n+        create_button(rootview, \"google\");\n+        create_button(rootview, \"next\");\n+        create_button(rootview, \"previous\");\n+        create_button(rootview, \"delete\");\n+\n+        return rootview;\n+    }\n+\n+\n+    public  void create_webview(View view){\n+        mWebView = (WebView)view.findViewById(R.id.library_webview);\n+\n+        // Enable Javascript\n+        WebSettings webSettings = mWebView.getSettings();\n+        webSettings.setJavaScriptEnabled(true);\n+        webSettings.setBuiltInZoomControls(true);\n+        webSettings.setUseWideViewPort(true);\n+        webSettings.setLoadWithOverviewMode(true);\n+        link =\"http://www.canon-europe.com/images/Android-logo_tcm13-1232684.png\";\n+        mWebView.loadUrl(link);\n+    }\n+\n+\n+    public void create_button(View v, String button){\n+        Button button_search;\n+        button_search=(Button)v.findViewById(R.id.button_search);\n+        button_search.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                transitionToFragment();\n+            }\n+        });\n+\n+        if (button.equals(\"next\") ){\n+            Button button_next;\n+            button_search = (Button) v.findViewById(R.id.button_library_next);\n+\n+            button_search.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    Log.d(TAG, \"next \");\n+                    pointer+=1;\n+                    reload_webview();\n+                }\n+            });\n+        }\n+        if (button.equals(\"previous\") ){\n+            Button button_previous;\n+            button_search = (Button) v.findViewById(R.id.button_library_previous);\n+\n+            button_search.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    Log.d(TAG, \"previous\");\n+                    pointer-=1;\n+                    reload_webview();\n+                }\n+            });\n+        }\n+        if (button.equals(\"delete\") ){\n+            Button button_delete;\n+            button_search = (Button) v.findViewById(R.id.button_delete);\n+\n+            button_search.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    try {\n+                        db.deleteImage(Image_list.get(pointer % Image_list.size()));\n+                    }\n+                    catch (Exception e){\n+                        Log.d(TAG, e.getMessage());\n+                    };\n+                    Image_list = db.get_all_images();\n+                }\n+            });\n+        }\n+\n+    }\n+\n+\n+    public  void reload_webview(){\n+        if (pointer<0){\n+            pointer=0;\n+        }\n+        if (Image_list.size()>0) {\n+            link = Image_list.get(pointer % Image_list.size()).getLink();\n+        }\n+        else\n+        {\n+            link =\"http://www.canon-europe.com/images/Android-logo_tcm13-1232684.png\";", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178250", "created_at": "2015-10-15T20:48:34Z", "body": "Same as above.", "updated_at": "2015-10-15T20:48:34Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178250", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178250"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178250"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/Library_fragment.java", "position": 129, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42178250}, {"original_position": 125, "diff_hunk": "@@ -0,0 +1,143 @@\n+package com.mycompany.imageview;\n+\n+import android.os.Bundle;\n+import android.support.v4.app.Fragment;\n+import android.support.v4.app.FragmentManager;\n+import android.support.v4.app.FragmentTransaction;\n+import android.util.Log;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+import android.widget.Button;\n+\n+import java.util.List;\n+\n+/**\n+ * A placeholder fragment containing a simple view.\n+ */\n+public class Library_fragment extends Fragment {\n+\n+    public Library_fragment() {\n+    }\n+    private String TAG = \"library_fragment\";\n+    private WebView mWebView;\n+    private int pointer;\n+    private String link;\n+    private MySQLiteHelper db;\n+    List<Image_DB> Image_list;\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                             Bundle savedInstanceState) {\n+        View rootview = inflater.inflate(R.layout.fragment_library_fragment, container, false);\n+\n+        db = new MySQLiteHelper(getActivity());\n+        Image_list = db.get_all_images();\n+\n+        create_webview(rootview);\n+        create_button(rootview, \"google\");\n+        create_button(rootview, \"next\");\n+        create_button(rootview, \"previous\");\n+        create_button(rootview, \"delete\");\n+\n+        return rootview;\n+    }\n+\n+\n+    public  void create_webview(View view){\n+        mWebView = (WebView)view.findViewById(R.id.library_webview);\n+\n+        // Enable Javascript\n+        WebSettings webSettings = mWebView.getSettings();\n+        webSettings.setJavaScriptEnabled(true);\n+        webSettings.setBuiltInZoomControls(true);\n+        webSettings.setUseWideViewPort(true);\n+        webSettings.setLoadWithOverviewMode(true);\n+        link =\"http://www.canon-europe.com/images/Android-logo_tcm13-1232684.png\";\n+        mWebView.loadUrl(link);\n+    }\n+\n+\n+    public void create_button(View v, String button){\n+        Button button_search;\n+        button_search=(Button)v.findViewById(R.id.button_search);\n+        button_search.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                transitionToFragment();\n+            }\n+        });\n+\n+        if (button.equals(\"next\") ){\n+            Button button_next;\n+            button_search = (Button) v.findViewById(R.id.button_library_next);\n+\n+            button_search.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    Log.d(TAG, \"next \");\n+                    pointer+=1;\n+                    reload_webview();\n+                }\n+            });\n+        }\n+        if (button.equals(\"previous\") ){\n+            Button button_previous;\n+            button_search = (Button) v.findViewById(R.id.button_library_previous);\n+\n+            button_search.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    Log.d(TAG, \"previous\");\n+                    pointer-=1;\n+                    reload_webview();\n+                }\n+            });\n+        }\n+        if (button.equals(\"delete\") ){\n+            Button button_delete;\n+            button_search = (Button) v.findViewById(R.id.button_delete);\n+\n+            button_search.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    try {\n+                        db.deleteImage(Image_list.get(pointer % Image_list.size()));\n+                    }\n+                    catch (Exception e){\n+                        Log.d(TAG, e.getMessage());\n+                    };\n+                    Image_list = db.get_all_images();\n+                }\n+            });\n+        }\n+\n+    }\n+\n+\n+    public  void reload_webview(){\n+        if (pointer<0){\n+            pointer=0;\n+        }\n+        if (Image_list.size()>0) {\n+            link = Image_list.get(pointer % Image_list.size()).getLink();", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178414", "created_at": "2015-10-15T20:49:46Z", "body": "Very nice way of using modulo to loop.", "updated_at": "2015-10-15T20:49:46Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178414", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178414"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178414"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/Library_fragment.java", "position": 125, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42178414}, {"original_position": 19, "diff_hunk": "@@ -0,0 +1,46 @@\n+package com.mycompany.imageview;\n+\n+import android.os.Bundle;\n+import android.support.v7.app.AppCompatActivity;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+\n+public class MainActivity extends AppCompatActivity {\n+\n+    @Override\n+    protected void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.activity_main);\n+\n+        android.support.v4.app.FragmentManager fm = getSupportFragmentManager();\n+\n+        android.support.v4.app.FragmentTransaction ft = fm.beginTransaction();\n+\n+        Search_fragment search_fragment = new Search_fragment();", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178504", "created_at": "2015-10-15T20:50:25Z", "body": "Move fragment transaction managing into a different method for clarity.", "updated_at": "2015-10-15T20:50:25Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178504", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178504"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178504"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/MainActivity.java", "position": 19, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42178504}, {"original_position": 32, "diff_hunk": "@@ -0,0 +1,180 @@\n+package com.mycompany.imageview;\n+\n+/**\n+ * Created by root on 9/28/15.\n+ */\n+\n+import android.content.ContentValues;\n+import android.content.Context;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.util.Log;\n+\n+import java.io.File;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class MySQLiteHelper extends SQLiteOpenHelper {\n+\n+    // Database Version\n+    private static final int DATABASE_VERSION = 2;\n+    // Database Name\n+    private static final String DATABASE_NAME = \"Image_Library\";\n+\n+    // Contacts table name\n+    private static final String TABLE_CONTACTS = \"Images\";\n+    // Image Table Columns names\n+    private static final String KEY_ID = \"id\";\n+    private static final String KEY_keyword = \"keyword\";\n+    private static final String KEY_link = \"link\";\n+\n+    private static final String[] COLUMNS = {KEY_ID,KEY_keyword,KEY_link};", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178623", "created_at": "2015-10-15T20:51:15Z", "body": "Any reason for not using a database contract and instead placing everything into the same helper?", "updated_at": "2015-10-15T20:51:15Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178623", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178623"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178623"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/MySQLiteHelper.java", "position": 32, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42178623}, {"original_position": 72, "diff_hunk": "@@ -0,0 +1,180 @@\n+package com.mycompany.imageview;\n+\n+/**\n+ * Created by root on 9/28/15.\n+ */\n+\n+import android.content.ContentValues;\n+import android.content.Context;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.util.Log;\n+\n+import java.io.File;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class MySQLiteHelper extends SQLiteOpenHelper {\n+\n+    // Database Version\n+    private static final int DATABASE_VERSION = 2;\n+    // Database Name\n+    private static final String DATABASE_NAME = \"Image_Library\";\n+\n+    // Contacts table name\n+    private static final String TABLE_CONTACTS = \"Images\";\n+    // Image Table Columns names\n+    private static final String KEY_ID = \"id\";\n+    private static final String KEY_keyword = \"keyword\";\n+    private static final String KEY_link = \"link\";\n+\n+    private static final String[] COLUMNS = {KEY_ID,KEY_keyword,KEY_link};\n+\n+\n+\n+\n+\n+\n+    public MySQLiteHelper(Context context) {\n+        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n+    }\n+\n+    @Override\n+    public void onCreate(SQLiteDatabase db) {\n+        // SQL statement to create book table\n+        String CREATE_IMAGE_TABLE = \"CREATE TABLE \"+TABLE_CONTACTS+\" ( \" +\n+                KEY_ID+\" INTEGER PRIMARY KEY AUTOINCREMENT, \" +KEY_keyword+\n+                \" TEXT, \"+\n+                KEY_link+\" TEXT )\";\n+\n+        // create books table\n+        db.execSQL(CREATE_IMAGE_TABLE);\n+    }\n+\n+    @Override\n+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n+        // Drop older books table if existed\n+        db.execSQL(\"DROP TABLE IF EXISTS \"+ TABLE_CONTACTS);\n+\n+        // create fresh books table\n+        this.onCreate(db);\n+    }\n+\n+\n+\n+\n+    public void add_image(Image_DB image){\n+        //for logging\n+        Log.d(\"add_image\", image.toString());\n+\n+        // 1. get reference to writable DB\n+        SQLiteDatabase db = this.getWritableDatabase();", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178785", "created_at": "2015-10-15T20:52:30Z", "body": "You will get a a performance decrease if you have to get the writable database each time you add an image. If you create a Database object as a class parameter and instantiate it in the oncreate, you will have less calls to getWriteableDatabase().", "updated_at": "2015-10-15T20:52:30Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178785", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178785"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178785"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/MySQLiteHelper.java", "position": 72, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42178785}, {"original_position": 90, "diff_hunk": "@@ -0,0 +1,180 @@\n+package com.mycompany.imageview;\n+\n+/**\n+ * Created by root on 9/28/15.\n+ */\n+\n+import android.content.ContentValues;\n+import android.content.Context;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.util.Log;\n+\n+import java.io.File;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class MySQLiteHelper extends SQLiteOpenHelper {\n+\n+    // Database Version\n+    private static final int DATABASE_VERSION = 2;\n+    // Database Name\n+    private static final String DATABASE_NAME = \"Image_Library\";\n+\n+    // Contacts table name\n+    private static final String TABLE_CONTACTS = \"Images\";\n+    // Image Table Columns names\n+    private static final String KEY_ID = \"id\";\n+    private static final String KEY_keyword = \"keyword\";\n+    private static final String KEY_link = \"link\";\n+\n+    private static final String[] COLUMNS = {KEY_ID,KEY_keyword,KEY_link};\n+\n+\n+\n+\n+\n+\n+    public MySQLiteHelper(Context context) {\n+        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n+    }\n+\n+    @Override\n+    public void onCreate(SQLiteDatabase db) {\n+        // SQL statement to create book table\n+        String CREATE_IMAGE_TABLE = \"CREATE TABLE \"+TABLE_CONTACTS+\" ( \" +\n+                KEY_ID+\" INTEGER PRIMARY KEY AUTOINCREMENT, \" +KEY_keyword+\n+                \" TEXT, \"+\n+                KEY_link+\" TEXT )\";\n+\n+        // create books table\n+        db.execSQL(CREATE_IMAGE_TABLE);\n+    }\n+\n+    @Override\n+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n+        // Drop older books table if existed\n+        db.execSQL(\"DROP TABLE IF EXISTS \"+ TABLE_CONTACTS);\n+\n+        // create fresh books table\n+        this.onCreate(db);\n+    }\n+\n+\n+\n+\n+    public void add_image(Image_DB image){\n+        //for logging\n+        Log.d(\"add_image\", image.toString());\n+\n+        // 1. get reference to writable DB\n+        SQLiteDatabase db = this.getWritableDatabase();\n+\n+        // 2. create ContentValues to add key \"column\"/value\n+        ContentValues values = new ContentValues();\n+        values.put(KEY_keyword, image.getkeyword()); // get title\n+        values.put(KEY_link, image.getLink()); // get author\n+\n+        // 3. insert\n+        db.insert(TABLE_CONTACTS, // table\n+                null, //nullColumnHack\n+                values); // key/value -> keys = column names/ values = column values\n+\n+        // 4. close\n+        db.close();\n+    }\n+    public Image_DB get_image(int id){\n+\n+        // 1. get reference to readable DB\n+        SQLiteDatabase db = this.getReadableDatabase();", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178799", "created_at": "2015-10-15T20:52:36Z", "body": "Same as above.", "updated_at": "2015-10-15T20:52:36Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178799", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42178799"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42178799"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/MySQLiteHelper.java", "position": 90, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42178799}, {"original_position": 116, "diff_hunk": "@@ -0,0 +1,180 @@\n+package com.mycompany.imageview;\n+\n+/**\n+ * Created by root on 9/28/15.\n+ */\n+\n+import android.content.ContentValues;\n+import android.content.Context;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.util.Log;\n+\n+import java.io.File;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class MySQLiteHelper extends SQLiteOpenHelper {\n+\n+    // Database Version\n+    private static final int DATABASE_VERSION = 2;\n+    // Database Name\n+    private static final String DATABASE_NAME = \"Image_Library\";\n+\n+    // Contacts table name\n+    private static final String TABLE_CONTACTS = \"Images\";\n+    // Image Table Columns names\n+    private static final String KEY_ID = \"id\";\n+    private static final String KEY_keyword = \"keyword\";\n+    private static final String KEY_link = \"link\";\n+\n+    private static final String[] COLUMNS = {KEY_ID,KEY_keyword,KEY_link};\n+\n+\n+\n+\n+\n+\n+    public MySQLiteHelper(Context context) {\n+        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n+    }\n+\n+    @Override\n+    public void onCreate(SQLiteDatabase db) {\n+        // SQL statement to create book table\n+        String CREATE_IMAGE_TABLE = \"CREATE TABLE \"+TABLE_CONTACTS+\" ( \" +\n+                KEY_ID+\" INTEGER PRIMARY KEY AUTOINCREMENT, \" +KEY_keyword+\n+                \" TEXT, \"+\n+                KEY_link+\" TEXT )\";\n+\n+        // create books table\n+        db.execSQL(CREATE_IMAGE_TABLE);\n+    }\n+\n+    @Override\n+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n+        // Drop older books table if existed\n+        db.execSQL(\"DROP TABLE IF EXISTS \"+ TABLE_CONTACTS);\n+\n+        // create fresh books table\n+        this.onCreate(db);\n+    }\n+\n+\n+\n+\n+    public void add_image(Image_DB image){\n+        //for logging\n+        Log.d(\"add_image\", image.toString());\n+\n+        // 1. get reference to writable DB\n+        SQLiteDatabase db = this.getWritableDatabase();\n+\n+        // 2. create ContentValues to add key \"column\"/value\n+        ContentValues values = new ContentValues();\n+        values.put(KEY_keyword, image.getkeyword()); // get title\n+        values.put(KEY_link, image.getLink()); // get author\n+\n+        // 3. insert\n+        db.insert(TABLE_CONTACTS, // table\n+                null, //nullColumnHack\n+                values); // key/value -> keys = column names/ values = column values\n+\n+        // 4. close\n+        db.close();\n+    }\n+    public Image_DB get_image(int id){\n+\n+        // 1. get reference to readable DB\n+        SQLiteDatabase db = this.getReadableDatabase();\n+\n+        // 2. build query\n+        Cursor cursor =\n+                db.query(TABLE_CONTACTS, // a. table\n+                        COLUMNS, // b. column names\n+                        \" id = ?\", // c. selections\n+                        new String[] { String.valueOf(id) }, // d. selections args\n+                        null, // e. group by\n+                        null, // f. having\n+                        null, // g. order by\n+                        null); // h. limit\n+\n+        // 3. if we got results get the first one\n+        if (cursor != null)\n+            cursor.moveToFirst();\n+\n+        // 4. build book object\n+        Image_DB image = new Image_DB();\n+        image.set_id(Integer.parseInt(cursor.getString(0)));\n+        image.set_keyword(cursor.getString(1));\n+        image.set_link(cursor.getString(2));\n+\n+        //log\n+        Log.d(\"getBook(\" + id + \")\", image.toString());\n+\n+        // 5. return book", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42179009", "created_at": "2015-10-15T20:54:13Z", "body": "return book? clear up comments and logs to be more descriptive.", "updated_at": "2015-10-15T20:54:13Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42179009", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42179009"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42179009"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/MySQLiteHelper.java", "position": 116, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42179009}, {"original_position": 43, "diff_hunk": "@@ -0,0 +1,43 @@\n+package com.mycompany.imageview;\n+public class Image_DB {\n+\n+    private int id;\n+    private String keyword;\n+    private String link;\n+\n+    public Image_DB(){}\n+//wzc why has an empty constructor?\n+\n+    public Image_DB(String keyword, String link) {\n+        super();\n+        this.keyword = keyword;\n+        this.link=link;\n+    }\n+    //getters & setters\n+\n+    @Override\n+    public String toString() {\n+        //wzc id auto give???\n+        return \"Image [id=\" + id + \", keyword=\" + keyword + \", link=\" + link\n+                + \"]\";\n+    }\n+    public String getkeyword(){\n+        return this.keyword;\n+    }\n+    public String getLink(){\n+        return this.link;\n+    }\n+    public Integer getid(){\n+        return this.id;\n+    }\n+    public void set_id(int id){\n+        this.id = id;\n+    }\n+    public void set_keyword(String keyword){\n+        this.keyword = keyword;\n+    }\n+    public void set_link(String link){\n+        this.link = link;\n+    }\n+}\n+", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42179089", "created_at": "2015-10-15T20:54:47Z", "body": "interesting way of handling each database entry.", "updated_at": "2015-10-15T20:54:47Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42179089", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42179089"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42179089"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/Image_DB.java", "position": 43, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42179089}, {"original_position": 143, "diff_hunk": "@@ -0,0 +1,180 @@\n+package com.mycompany.imageview;\n+\n+/**\n+ * Created by root on 9/28/15.\n+ */\n+\n+import android.content.ContentValues;\n+import android.content.Context;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.util.Log;\n+\n+import java.io.File;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class MySQLiteHelper extends SQLiteOpenHelper {\n+\n+    // Database Version\n+    private static final int DATABASE_VERSION = 2;\n+    // Database Name\n+    private static final String DATABASE_NAME = \"Image_Library\";\n+\n+    // Contacts table name\n+    private static final String TABLE_CONTACTS = \"Images\";\n+    // Image Table Columns names\n+    private static final String KEY_ID = \"id\";\n+    private static final String KEY_keyword = \"keyword\";\n+    private static final String KEY_link = \"link\";\n+\n+    private static final String[] COLUMNS = {KEY_ID,KEY_keyword,KEY_link};\n+\n+\n+\n+\n+\n+\n+    public MySQLiteHelper(Context context) {\n+        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n+    }\n+\n+    @Override\n+    public void onCreate(SQLiteDatabase db) {\n+        // SQL statement to create book table\n+        String CREATE_IMAGE_TABLE = \"CREATE TABLE \"+TABLE_CONTACTS+\" ( \" +\n+                KEY_ID+\" INTEGER PRIMARY KEY AUTOINCREMENT, \" +KEY_keyword+\n+                \" TEXT, \"+\n+                KEY_link+\" TEXT )\";\n+\n+        // create books table\n+        db.execSQL(CREATE_IMAGE_TABLE);\n+    }\n+\n+    @Override\n+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n+        // Drop older books table if existed\n+        db.execSQL(\"DROP TABLE IF EXISTS \"+ TABLE_CONTACTS);\n+\n+        // create fresh books table\n+        this.onCreate(db);\n+    }\n+\n+\n+\n+\n+    public void add_image(Image_DB image){\n+        //for logging\n+        Log.d(\"add_image\", image.toString());\n+\n+        // 1. get reference to writable DB\n+        SQLiteDatabase db = this.getWritableDatabase();\n+\n+        // 2. create ContentValues to add key \"column\"/value\n+        ContentValues values = new ContentValues();\n+        values.put(KEY_keyword, image.getkeyword()); // get title\n+        values.put(KEY_link, image.getLink()); // get author\n+\n+        // 3. insert\n+        db.insert(TABLE_CONTACTS, // table\n+                null, //nullColumnHack\n+                values); // key/value -> keys = column names/ values = column values\n+\n+        // 4. close\n+        db.close();\n+    }\n+    public Image_DB get_image(int id){\n+\n+        // 1. get reference to readable DB\n+        SQLiteDatabase db = this.getReadableDatabase();\n+\n+        // 2. build query\n+        Cursor cursor =\n+                db.query(TABLE_CONTACTS, // a. table\n+                        COLUMNS, // b. column names\n+                        \" id = ?\", // c. selections\n+                        new String[] { String.valueOf(id) }, // d. selections args\n+                        null, // e. group by\n+                        null, // f. having\n+                        null, // g. order by\n+                        null); // h. limit\n+\n+        // 3. if we got results get the first one\n+        if (cursor != null)\n+            cursor.moveToFirst();\n+\n+        // 4. build book object\n+        Image_DB image = new Image_DB();\n+        image.set_id(Integer.parseInt(cursor.getString(0)));\n+        image.set_keyword(cursor.getString(1));\n+        image.set_link(cursor.getString(2));\n+\n+        //log\n+        Log.d(\"getBook(\" + id + \")\", image.toString());\n+\n+        // 5. return book\n+        return image;\n+    }\n+    public List<Image_DB> get_all_images() {\n+        List<Image_DB> images = new LinkedList<Image_DB>();\n+\n+        // 1. get reference to readable DB\n+        SQLiteDatabase db = this.getReadableDatabase();\n+\n+        // 2. build query\n+        Cursor cursor =\n+                db.query(TABLE_CONTACTS, // a. table\n+                        COLUMNS, // b. column names\n+                        null, // c. selections\n+                        null, // d. selections args\n+                        null, // e. group by\n+                        null, // f. having\n+                        null, // g. order by\n+                        null); // h. limit\n+\n+        // 3. if we got results get the first one\n+        if (cursor != null)\n+            cursor.moveToFirst();\n+\n+\n+        Image_DB image = null;\n+        if (cursor.moveToFirst()) {\n+            do {", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42179345", "created_at": "2015-10-15T20:56:42Z", "body": "You can just use just a while loop here as well, since cursor.getNext() returns a boolean to let you know if the cursor has reached the end.", "updated_at": "2015-10-15T20:56:42Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42179345", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42179345"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42179345"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/MySQLiteHelper.java", "position": 143, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42179345}, {"original_position": 166, "diff_hunk": "@@ -0,0 +1,180 @@\n+package com.mycompany.imageview;\n+\n+/**\n+ * Created by root on 9/28/15.\n+ */\n+\n+import android.content.ContentValues;\n+import android.content.Context;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.util.Log;\n+\n+import java.io.File;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class MySQLiteHelper extends SQLiteOpenHelper {\n+\n+    // Database Version\n+    private static final int DATABASE_VERSION = 2;\n+    // Database Name\n+    private static final String DATABASE_NAME = \"Image_Library\";\n+\n+    // Contacts table name\n+    private static final String TABLE_CONTACTS = \"Images\";\n+    // Image Table Columns names\n+    private static final String KEY_ID = \"id\";\n+    private static final String KEY_keyword = \"keyword\";\n+    private static final String KEY_link = \"link\";\n+\n+    private static final String[] COLUMNS = {KEY_ID,KEY_keyword,KEY_link};\n+\n+\n+\n+\n+\n+\n+    public MySQLiteHelper(Context context) {\n+        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n+    }\n+\n+    @Override\n+    public void onCreate(SQLiteDatabase db) {\n+        // SQL statement to create book table\n+        String CREATE_IMAGE_TABLE = \"CREATE TABLE \"+TABLE_CONTACTS+\" ( \" +\n+                KEY_ID+\" INTEGER PRIMARY KEY AUTOINCREMENT, \" +KEY_keyword+\n+                \" TEXT, \"+\n+                KEY_link+\" TEXT )\";\n+\n+        // create books table\n+        db.execSQL(CREATE_IMAGE_TABLE);\n+    }\n+\n+    @Override\n+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n+        // Drop older books table if existed\n+        db.execSQL(\"DROP TABLE IF EXISTS \"+ TABLE_CONTACTS);\n+\n+        // create fresh books table\n+        this.onCreate(db);\n+    }\n+\n+\n+\n+\n+    public void add_image(Image_DB image){\n+        //for logging\n+        Log.d(\"add_image\", image.toString());\n+\n+        // 1. get reference to writable DB\n+        SQLiteDatabase db = this.getWritableDatabase();\n+\n+        // 2. create ContentValues to add key \"column\"/value\n+        ContentValues values = new ContentValues();\n+        values.put(KEY_keyword, image.getkeyword()); // get title\n+        values.put(KEY_link, image.getLink()); // get author\n+\n+        // 3. insert\n+        db.insert(TABLE_CONTACTS, // table\n+                null, //nullColumnHack\n+                values); // key/value -> keys = column names/ values = column values\n+\n+        // 4. close\n+        db.close();\n+    }\n+    public Image_DB get_image(int id){\n+\n+        // 1. get reference to readable DB\n+        SQLiteDatabase db = this.getReadableDatabase();\n+\n+        // 2. build query\n+        Cursor cursor =\n+                db.query(TABLE_CONTACTS, // a. table\n+                        COLUMNS, // b. column names\n+                        \" id = ?\", // c. selections\n+                        new String[] { String.valueOf(id) }, // d. selections args\n+                        null, // e. group by\n+                        null, // f. having\n+                        null, // g. order by\n+                        null); // h. limit\n+\n+        // 3. if we got results get the first one\n+        if (cursor != null)\n+            cursor.moveToFirst();\n+\n+        // 4. build book object\n+        Image_DB image = new Image_DB();\n+        image.set_id(Integer.parseInt(cursor.getString(0)));\n+        image.set_keyword(cursor.getString(1));\n+        image.set_link(cursor.getString(2));\n+\n+        //log\n+        Log.d(\"getBook(\" + id + \")\", image.toString());\n+\n+        // 5. return book\n+        return image;\n+    }\n+    public List<Image_DB> get_all_images() {\n+        List<Image_DB> images = new LinkedList<Image_DB>();\n+\n+        // 1. get reference to readable DB\n+        SQLiteDatabase db = this.getReadableDatabase();\n+\n+        // 2. build query\n+        Cursor cursor =\n+                db.query(TABLE_CONTACTS, // a. table\n+                        COLUMNS, // b. column names\n+                        null, // c. selections\n+                        null, // d. selections args\n+                        null, // e. group by\n+                        null, // f. having\n+                        null, // g. order by\n+                        null); // h. limit\n+\n+        // 3. if we got results get the first one\n+        if (cursor != null)\n+            cursor.moveToFirst();\n+\n+\n+        Image_DB image = null;\n+        if (cursor.moveToFirst()) {\n+            do {\n+                image = new Image_DB();\n+                String string= cursor.getString(0)+cursor.getString(1)+cursor.getString(2);\n+                Log.d(\"cursor.getstring\",string);\n+\n+                image.set_id(Integer.parseInt(cursor.getString(0)));\n+                image.set_keyword(cursor.getString(1));\n+                image.set_link(cursor.getString(2));\n+\n+                // Add book to books\n+                images.add(image);\n+            } while (cursor.moveToNext());\n+        }\n+\n+        Log.d(\"getAllImages()\", images.toString());\n+\n+        // return books\n+        return images;\n+    }\n+    // Deleting single book\n+    public void deleteImage(Image_DB image) {\n+\n+        // 1. get reference to writable DB\n+        SQLiteDatabase db = this.getWritableDatabase();", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42179792", "created_at": "2015-10-15T21:00:08Z", "body": "Same as above.", "updated_at": "2015-10-15T21:00:08Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42179792", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42179792"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42179792"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/MySQLiteHelper.java", "position": 166, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42179792}, {"original_position": 61, "diff_hunk": "@@ -0,0 +1,225 @@\n+package com.mycompany.imageview;\n+\n+import android.os.Bundle;\n+import android.support.v4.app.Fragment;\n+import android.support.v4.app.FragmentManager;\n+import android.support.v4.app.FragmentTransaction;\n+import android.util.Log;\n+import android.view.KeyEvent;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.view.inputmethod.EditorInfo;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+import android.widget.Button;\n+import android.widget.EditText;\n+import android.widget.TextView;\n+\n+import com.android.volley.Request;\n+import com.android.volley.RequestQueue;\n+import com.android.volley.Response;\n+import com.android.volley.VolleyError;\n+import com.android.volley.toolbox.JsonObjectRequest;\n+import com.android.volley.toolbox.Volley;\n+import com.google.android.gms.appdatasearch.GetRecentContextCall;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * A placeholder fragment containing a simple view.\n+ */\n+public class Search_fragment extends Fragment {\n+\n+    public Search_fragment() {\n+    }\n+\n+    private WebView mWebView;\n+    private EditText editText;\n+    private ArrayList<String> link_array = new ArrayList<>();\n+    private int pointer;\n+    private String link;\n+    private String keyword;\n+    private MySQLiteHelper db;\n+\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                             Bundle savedInstanceState) {\n+\n+\n+        View rootView = inflater.inflate(R.layout.fragment_search_fragment, container, false);\n+//        text_input(rootView);\n+\n+        db = new MySQLiteHelper(getActivity());\n+        editText = (EditText)rootView.findViewById(R.id.google_search);\n+        create_button(rootView, \"library\");", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42179830", "created_at": "2015-10-15T21:00:31Z", "body": "Could be cleaner with individual methods.", "updated_at": "2015-10-15T21:00:31Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42179830", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42179830"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42179830"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/Search_fragment.java", "position": 61, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42179830}, {"original_position": 208, "diff_hunk": "@@ -0,0 +1,225 @@\n+package com.mycompany.imageview;\n+\n+import android.os.Bundle;\n+import android.support.v4.app.Fragment;\n+import android.support.v4.app.FragmentManager;\n+import android.support.v4.app.FragmentTransaction;\n+import android.util.Log;\n+import android.view.KeyEvent;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.view.inputmethod.EditorInfo;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+import android.widget.Button;\n+import android.widget.EditText;\n+import android.widget.TextView;\n+\n+import com.android.volley.Request;\n+import com.android.volley.RequestQueue;\n+import com.android.volley.Response;\n+import com.android.volley.VolleyError;\n+import com.android.volley.toolbox.JsonObjectRequest;\n+import com.android.volley.toolbox.Volley;\n+import com.google.android.gms.appdatasearch.GetRecentContextCall;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * A placeholder fragment containing a simple view.\n+ */\n+public class Search_fragment extends Fragment {\n+\n+    public Search_fragment() {\n+    }\n+\n+    private WebView mWebView;\n+    private EditText editText;\n+    private ArrayList<String> link_array = new ArrayList<>();\n+    private int pointer;\n+    private String link;\n+    private String keyword;\n+    private MySQLiteHelper db;\n+\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                             Bundle savedInstanceState) {\n+\n+\n+        View rootView = inflater.inflate(R.layout.fragment_search_fragment, container, false);\n+//        text_input(rootView);\n+\n+        db = new MySQLiteHelper(getActivity());\n+        editText = (EditText)rootView.findViewById(R.id.google_search);\n+        create_button(rootView, \"library\");\n+        create_button(rootView, \"search\");\n+        create_button(rootView, \"next\");\n+        create_button(rootView, \"previous\");\n+        create_button(rootView, \"save\");\n+        create_webview(rootView);\n+\n+        return rootView;\n+    }\n+\n+\n+    public void create_button(View v, String button){\n+        if (button.equals(\"library\") ){\n+            Button button_library;\n+            button_library = (Button) v.findViewById(R.id.button_library);\n+\n+            button_library.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    transitionToFragment();\n+                }\n+            });\n+        }\n+        if (button.equals(\"search\") ){\n+            Button button_search;\n+            button_search = (Button) v.findViewById(R.id.button_search);\n+\n+            button_search.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    keyword = editText.getText().toString();\n+                    Log.d(\"gettext\", keyword);\n+                    google_search(keyword);\n+                }\n+            });\n+        }\n+        if (button.equals(\"next\") ){\n+            Button button_search;\n+            button_search = (Button) v.findViewById(R.id.button_search_next);\n+\n+            button_search.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    pointer+=1;\n+                    reload_webview();\n+                }\n+            });\n+        }\n+        if (button.equals(\"previous\") ){\n+            Button button_search;\n+            button_search = (Button) v.findViewById(R.id.button_search_previous);\n+\n+            button_search.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    pointer-=1;\n+                    reload_webview();\n+                }\n+            });\n+        }\n+        if (button.equals(\"save\") ){\n+            final Button button_save;\n+            button_save = (Button) v.findViewById(R.id.button_save);\n+\n+            button_save.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    if (link_array.size()>0) {\n+                        link = link_array.get(pointer % link_array.size());\n+                        Log.i(\"button_save\", \"save \");\n+                    }\n+                    else{\n+                        link =\"http://i.ytimg.com/vi/tntOCGkgt98/maxresdefault.jpg\";\n+                        Log.i(\"button_save\", \"save_first \");\n+                    }\n+                    db.add_image(new Image_DB(keyword,link));\n+                    Log.i(\"button_save\", \"save_after \");\n+                }\n+            });\n+        }}\n+\n+\n+    public void transitionToFragment() {\n+        Library_fragment library_fragment = new Library_fragment();\n+        FragmentManager fm = getActivity().getSupportFragmentManager();\n+        FragmentTransaction transaction = fm.beginTransaction();\n+        transaction.replace(R.id.container,library_fragment);\n+        transaction.commit();\n+    }\n+\n+    public  void create_webview(View view){\n+        mWebView = (WebView)view.findViewById(R.id.search_webview);\n+        // Enable Javascript\n+        WebSettings webSettings = mWebView.getSettings();\n+        webSettings.setJavaScriptEnabled(true);\n+        webSettings.setBuiltInZoomControls(true);\n+        webSettings.setUseWideViewPort(true);\n+        webSettings.setLoadWithOverviewMode(true);\n+        link =\"http://www.canon-europe.com/images/Android-logo_tcm13-1232684.png\";\n+        mWebView.loadUrl(link);\n+    }\n+\n+    public  void reload_webview(){\n+        if (pointer<0){\n+            pointer=0;\n+        }\n+        if (link_array.size()>0) {\n+            link = link_array.get(pointer % link_array.size());\n+        }\n+        mWebView.loadUrl(link);\n+    }\n+    public void google_search(String search) {\n+        // setup requestqueue here. Usually you should set up one queue for global use\n+        RequestQueue queue = Volley.newRequestQueue(getActivity());\n+\n+        // setup the request data\n+        search = search.replaceAll(\" \",\"+\");\n+        String URL = \"https://www.googleapis.com/customsearch/v1?\";\n+        URL+=\"key=AIzaSyAw-vsCUjYacbHHVDLeSUZPynir7gyGSwE\"+\"&\";\n+        URL+=\"cx=003197243441389598668:b-nzlg3snm8\"+\"&\";\n+        URL+=\"searchType=image&\";\n+        URL+=\"q=\"+search;\n+\n+        // setup the necessary json body for google search\n+        JSONObject body = new JSONObject();\n+\n+        JsonObjectRequest getRequest = new JsonObjectRequest(\n+                Request.Method.GET,\n+                URL,\n+                body,\n+                new Response.Listener<JSONObject>() {\n+                    @Override\n+                    public void onResponse(JSONObject response) {\n+                        // do something with response\n+                        parse_json(response);\n+                        Log.d(\"Response\", response.toString());\n+                    }\n+                },\n+                new Response.ErrorListener() {\n+                    @Override\n+                    public void onErrorResponse(VolleyError error) {\n+                        Log.e(\"Error\", error.getMessage());\n+                    }\n+                }\n+        );\n+\n+        queue.add(getRequest);\n+    }", "url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42179932", "created_at": "2015-10-15T21:01:32Z", "body": "Separating this HTTP request into a separate handler with a callback would be the correct way to do this.", "updated_at": "2015-10-15T21:01:32Z", "html_url": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42179932", "pull_request_url": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15", "_links": {"self": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/comments/42179932"}, "html": {"href": "https://github.com/OlinMobileProto/Lab2/pull/15#discussion_r42179932"}, "pull_request": {"href": "https://api.github.com/repos/OlinMobileProto/Lab2/pulls/15"}}, "commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "user": {"following_url": "https://api.github.com/users/dcelik/following{/other_user}", "events_url": "https://api.github.com/users/dcelik/events{/privacy}", "organizations_url": "https://api.github.com/users/dcelik/orgs", "url": "https://api.github.com/users/dcelik", "gists_url": "https://api.github.com/users/dcelik/gists{/gist_id}", "html_url": "https://github.com/dcelik", "subscriptions_url": "https://api.github.com/users/dcelik/subscriptions", "avatar_url": "https://avatars.githubusercontent.com/u/5778626?v=3", "repos_url": "https://api.github.com/users/dcelik/repos", "received_events_url": "https://api.github.com/users/dcelik/received_events", "gravatar_id": "", "starred_url": "https://api.github.com/users/dcelik/starred{/owner}{/repo}", "site_admin": false, "login": "dcelik", "type": "User", "id": 5778626, "followers_url": "https://api.github.com/users/dcelik/followers"}, "path": "Imageview/app/src/main/java/com/mycompany/imageview/Search_fragment.java", "position": 208, "original_commit_id": "f9e90324e34ffdf15dd833c427ba16cd12ee2c26", "id": 42179932}]